{"ast":null,"code":"var _slicedToArray = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _get = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar flexSpec = require('./flex-spec');\n\nvar Declaration = require('../declaration');\n\nvar FlexFlow = /*#__PURE__*/function (_Declaration) {\n  \"use strict\";\n\n  _inherits(FlexFlow, _Declaration);\n\n  function FlexFlow() {\n    _classCallCheck(this, FlexFlow);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(FlexFlow).apply(this, arguments));\n  }\n\n  _createClass(FlexFlow, [{\n    key: \"insert\",\n\n    /**\n     * Use two properties for 2009 spec\n     */\n    value: function insert(decl, prefix, prefixes) {\n      var spec;\n\n      var _flexSpec = flexSpec(prefix);\n\n      var _flexSpec2 = _slicedToArray(_flexSpec, 2);\n\n      spec = _flexSpec2[0];\n      prefix = _flexSpec2[1];\n\n      if (spec !== 2009) {\n        return _get(_getPrototypeOf(FlexFlow.prototype), \"insert\", this).call(this, decl, prefix, prefixes);\n      }\n\n      var values = decl.value.split(/\\s+/).filter(function (i) {\n        return i !== 'wrap' && i !== 'nowrap' && 'wrap-reverse';\n      });\n\n      if (values.length === 0) {\n        return undefined;\n      }\n\n      var already = decl.parent.some(function (i) {\n        return i.prop === prefix + 'box-orient' || i.prop === prefix + 'box-direction';\n      });\n\n      if (already) {\n        return undefined;\n      }\n\n      var value = values[0];\n      var orient = value.includes('row') ? 'horizontal' : 'vertical';\n      var dir = value.includes('reverse') ? 'reverse' : 'normal';\n      var cloned = this.clone(decl);\n      cloned.prop = prefix + 'box-orient';\n      cloned.value = orient;\n\n      if (this.needCascade(decl)) {\n        cloned.raws.before = this.calcBefore(prefixes, decl, prefix);\n      }\n\n      decl.parent.insertBefore(decl, cloned);\n      cloned = this.clone(decl);\n      cloned.prop = prefix + 'box-direction';\n      cloned.value = dir;\n\n      if (this.needCascade(decl)) {\n        cloned.raws.before = this.calcBefore(prefixes, decl, prefix);\n      }\n\n      return decl.parent.insertBefore(decl, cloned);\n    }\n  }]);\n\n  return FlexFlow;\n}(Declaration);\n\nFlexFlow.names = ['flex-flow', 'box-direction', 'box-orient'];\nmodule.exports = FlexFlow;","map":null,"metadata":{},"sourceType":"script"}