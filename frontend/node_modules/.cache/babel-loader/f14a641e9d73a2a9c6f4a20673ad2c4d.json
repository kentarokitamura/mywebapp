{"ast":null,"code":"var browserslist = require('browserslist');\n\nvar _require = require('caniuse-lite'),\n    agents = _require.agents;\n\nvar pico = require('picocolors');\n\nvar Browsers = require('./browsers');\n\nvar Prefixes = require('./prefixes');\n\nvar dataPrefixes = require('../data/prefixes');\n\nvar getInfo = require('./info');\n\nvar autoprefixerData = {\n  browsers: agents,\n  prefixes: dataPrefixes\n};\nvar WARNING = '\\n' + '  Replace Autoprefixer `browsers` option to Browserslist config.\\n' + '  Use `browserslist` key in `package.json` or `.browserslistrc` file.\\n' + '\\n' + '  Using `browsers` option can cause errors. Browserslist config can\\n' + '  be used for Babel, Autoprefixer, postcss-normalize and other tools.\\n' + '\\n' + '  If you really need to use option, rename it to `overrideBrowserslist`.\\n' + '\\n' + '  Learn more at:\\n' + '  https://github.com/browserslist/browserslist#readme\\n' + '  https://twitter.com/browserslist\\n' + '\\n';\n\nfunction isPlainObject(obj) {\n  return Object.prototype.toString.apply(obj) === '[object Object]';\n}\n\nvar cache = new Map();\n\nfunction timeCapsule(result, prefixes) {\n  if (prefixes.browsers.selected.length === 0) {\n    return;\n  }\n\n  if (prefixes.add.selectors.length > 0) {\n    return;\n  }\n\n  if (Object.keys(prefixes.add).length > 2) {\n    return;\n  }\n  /* c8 ignore next 11 */\n\n\n  result.warn('Autoprefixer target browsers do not need any prefixes.' + 'You do not need Autoprefixer anymore.\\n' + 'Check your Browserslist config to be sure that your targets ' + 'are set up correctly.\\n' + '\\n' + '  Learn more at:\\n' + '  https://github.com/postcss/autoprefixer#readme\\n' + '  https://github.com/browserslist/browserslist#readme\\n' + '\\n');\n}\n\nmodule.exports = plugin;\n\nfunction plugin() {\n  for (var _len = arguments.length, reqs = new Array(_len), _key = 0; _key < _len; _key++) {\n    reqs[_key] = arguments[_key];\n  }\n\n  var options;\n\n  if (reqs.length === 1 && isPlainObject(reqs[0])) {\n    options = reqs[0];\n    reqs = undefined;\n  } else if (reqs.length === 0 || reqs.length === 1 && !reqs[0]) {\n    reqs = undefined;\n  } else if (reqs.length <= 2 && (Array.isArray(reqs[0]) || !reqs[0])) {\n    options = reqs[1];\n    reqs = reqs[0];\n  } else if (typeof reqs[reqs.length - 1] === 'object') {\n    options = reqs.pop();\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  if (options.browser) {\n    throw new Error('Change `browser` option to `overrideBrowserslist` in Autoprefixer');\n  } else if (options.browserslist) {\n    throw new Error('Change `browserslist` option to `overrideBrowserslist` in Autoprefixer');\n  }\n\n  if (options.overrideBrowserslist) {\n    reqs = options.overrideBrowserslist;\n  } else if (options.browsers) {\n    if (typeof console !== 'undefined' && console.warn) {\n      console.warn(pico.red(WARNING.replace(/`[^`]+`/g, function (i) {\n        return pico.yellow(i.slice(1, -1));\n      })));\n    }\n\n    reqs = options.browsers;\n  }\n\n  var brwlstOpts = {\n    ignoreUnknownVersions: options.ignoreUnknownVersions,\n    stats: options.stats,\n    env: options.env\n  };\n\n  function loadPrefixes(opts) {\n    var d = autoprefixerData;\n    var browsers = new Browsers(d.browsers, reqs, opts, brwlstOpts);\n    var key = browsers.selected.join(', ') + JSON.stringify(options);\n\n    if (!cache.has(key)) {\n      cache.set(key, new Prefixes(d.prefixes, browsers, options));\n    }\n\n    return cache.get(key);\n  }\n\n  return {\n    postcssPlugin: 'autoprefixer',\n    prepare: function prepare(result) {\n      var prefixes = loadPrefixes({\n        from: result.opts.from,\n        env: options.env\n      });\n      return {\n        OnceExit: function OnceExit(root) {\n          timeCapsule(result, prefixes);\n\n          if (options.remove !== false) {\n            prefixes.processor.remove(root, result);\n          }\n\n          if (options.add !== false) {\n            prefixes.processor.add(root, result);\n          }\n        }\n      };\n    },\n    info: function info(opts) {\n      opts = opts || {};\n      opts.from = opts.from || process.cwd();\n      return getInfo(loadPrefixes(opts));\n    },\n    options: options,\n    browsers: reqs\n  };\n}\n\nplugin.postcss = true;\n/**\n * Autoprefixer data\n */\n\nplugin.data = autoprefixerData;\n/**\n * Autoprefixer default browsers\n */\n\nplugin.defaults = browserslist.defaults;\n/**\n * Inspect with default Autoprefixer\n */\n\nplugin.info = function () {\n  return plugin().info();\n};","map":null,"metadata":{},"sourceType":"script"}