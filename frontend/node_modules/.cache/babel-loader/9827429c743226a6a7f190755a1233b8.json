{"ast":null,"code":"var _slicedToArray = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar browserslist = require('browserslist');\n\nvar agents = require('caniuse-lite').agents;\n\nvar utils = require('./utils');\n\nvar Browsers = /*#__PURE__*/function () {\n  \"use strict\";\n\n  _createClass(Browsers, null, [{\n    key: \"prefixes\",\n\n    /**\n     * Return all prefixes for default browser data\n     */\n    value: function prefixes() {\n      if (this.prefixesCache) {\n        return this.prefixesCache;\n      }\n\n      this.prefixesCache = [];\n\n      for (var name in agents) {\n        this.prefixesCache.push(\"-\".concat(agents[name].prefix, \"-\"));\n      }\n\n      this.prefixesCache = utils.uniq(this.prefixesCache).sort(function (a, b) {\n        return b.length - a.length;\n      });\n      return this.prefixesCache;\n    }\n    /**\n     * Check is value contain any possible prefix\n     */\n\n  }, {\n    key: \"withPrefix\",\n    value: function withPrefix(value) {\n      if (!this.prefixesRegexp) {\n        this.prefixesRegexp = new RegExp(this.prefixes().join('|'));\n      }\n\n      return this.prefixesRegexp.test(value);\n    }\n  }]);\n\n  function Browsers(data, requirements, options, browserslistOpts) {\n    _classCallCheck(this, Browsers);\n\n    this.data = data;\n    this.options = options || {};\n    this.browserslistOpts = browserslistOpts || {};\n    this.selected = this.parse(requirements);\n  }\n  /**\n   * Return browsers selected by requirements\n   */\n\n\n  _createClass(Browsers, [{\n    key: \"parse\",\n    value: function parse(requirements) {\n      var opts = {};\n\n      for (var i in this.browserslistOpts) {\n        opts[i] = this.browserslistOpts[i];\n      }\n\n      opts.path = this.options.from;\n      return browserslist(requirements, opts);\n    }\n    /**\n     * Return prefix for selected browser\n     */\n\n  }, {\n    key: \"prefix\",\n    value: function prefix(browser) {\n      var _browser$split = browser.split(' '),\n          _browser$split2 = _slicedToArray(_browser$split, 2),\n          name = _browser$split2[0],\n          version = _browser$split2[1];\n\n      var data = this.data[name];\n      var prefix = data.prefix_exceptions && data.prefix_exceptions[version];\n\n      if (!prefix) {\n        prefix = data.prefix;\n      }\n\n      return \"-\".concat(prefix, \"-\");\n    }\n    /**\n     * Is browser is selected by requirements\n     */\n\n  }, {\n    key: \"isSelected\",\n    value: function isSelected(browser) {\n      return this.selected.includes(browser);\n    }\n  }]);\n\n  return Browsers;\n}();\n\nmodule.exports = Browsers;","map":null,"metadata":{},"sourceType":"script"}