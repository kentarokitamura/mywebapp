{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _get = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar OldValue = require('../old-value');\n\nvar Value = require('../value');\n\nvar Pixelated = /*#__PURE__*/function (_Value) {\n  \"use strict\";\n\n  _inherits(Pixelated, _Value);\n\n  function Pixelated() {\n    _classCallCheck(this, Pixelated);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Pixelated).apply(this, arguments));\n  }\n\n  _createClass(Pixelated, [{\n    key: \"replace\",\n\n    /**\n     * Use non-standard name for WebKit and Firefox\n     */\n    value: function replace(string, prefix) {\n      if (prefix === '-webkit-') {\n        return string.replace(this.regexp(), '$1-webkit-optimize-contrast');\n      }\n\n      if (prefix === '-moz-') {\n        return string.replace(this.regexp(), '$1-moz-crisp-edges');\n      }\n\n      return _get(_getPrototypeOf(Pixelated.prototype), \"replace\", this).call(this, string, prefix);\n    }\n    /**\n     * Different name for WebKit and Firefox\n     */\n\n  }, {\n    key: \"old\",\n    value: function old(prefix) {\n      if (prefix === '-webkit-') {\n        return new OldValue(this.name, '-webkit-optimize-contrast');\n      }\n\n      if (prefix === '-moz-') {\n        return new OldValue(this.name, '-moz-crisp-edges');\n      }\n\n      return _get(_getPrototypeOf(Pixelated.prototype), \"old\", this).call(this, prefix);\n    }\n  }]);\n\n  return Pixelated;\n}(Value);\n\nPixelated.names = ['pixelated'];\nmodule.exports = Pixelated;","map":null,"metadata":{},"sourceType":"script"}