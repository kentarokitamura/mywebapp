{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _get = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar Declaration = require('../declaration');\n\nvar WritingMode = /*#__PURE__*/function (_Declaration) {\n  \"use strict\";\n\n  _inherits(WritingMode, _Declaration);\n\n  function WritingMode() {\n    _classCallCheck(this, WritingMode);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(WritingMode).apply(this, arguments));\n  }\n\n  _createClass(WritingMode, [{\n    key: \"insert\",\n    value: function insert(decl, prefix, prefixes) {\n      if (prefix === '-ms-') {\n        var cloned = this.set(this.clone(decl), prefix);\n\n        if (this.needCascade(decl)) {\n          cloned.raws.before = this.calcBefore(prefixes, decl, prefix);\n        }\n\n        var direction = 'ltr';\n        decl.parent.nodes.forEach(function (i) {\n          if (i.prop === 'direction') {\n            if (i.value === 'rtl' || i.value === 'ltr') direction = i.value;\n          }\n        });\n        cloned.value = WritingMode.msValues[direction][decl.value] || decl.value;\n        return decl.parent.insertBefore(decl, cloned);\n      }\n\n      return _get(_getPrototypeOf(WritingMode.prototype), \"insert\", this).call(this, decl, prefix, prefixes);\n    }\n  }]);\n\n  return WritingMode;\n}(Declaration);\n\nWritingMode.names = ['writing-mode'];\nWritingMode.msValues = {\n  ltr: {\n    'horizontal-tb': 'lr-tb',\n    'vertical-rl': 'tb-rl',\n    'vertical-lr': 'tb-lr'\n  },\n  rtl: {\n    'horizontal-tb': 'rl-tb',\n    'vertical-rl': 'bt-rl',\n    'vertical-lr': 'bt-lr'\n  }\n};\nmodule.exports = WritingMode;","map":null,"metadata":{},"sourceType":"script"}