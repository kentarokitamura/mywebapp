{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar Prefixer = require('./prefixer');\n\nvar OldValue = require('./old-value');\n\nvar vendor = require('./vendor');\n\nvar utils = require('./utils');\n\nvar Value = /*#__PURE__*/function (_Prefixer) {\n  \"use strict\";\n\n  _inherits(Value, _Prefixer);\n\n  function Value() {\n    _classCallCheck(this, Value);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Value).apply(this, arguments));\n  }\n\n  _createClass(Value, [{\n    key: \"check\",\n\n    /**\n     * Is declaration need to be prefixed\n     */\n    value: function check(decl) {\n      var value = decl.value;\n\n      if (!value.includes(this.name)) {\n        return false;\n      }\n\n      return !!value.match(this.regexp());\n    }\n    /**\n     * Lazy regexp loading\n     */\n\n  }, {\n    key: \"regexp\",\n    value: function regexp() {\n      return this.regexpCache || (this.regexpCache = utils.regexp(this.name));\n    }\n    /**\n     * Add prefix to values in string\n     */\n\n  }, {\n    key: \"replace\",\n    value: function replace(string, prefix) {\n      return string.replace(this.regexp(), \"$1\".concat(prefix, \"$2\"));\n    }\n    /**\n     * Get value with comments if it was not changed\n     */\n\n  }, {\n    key: \"value\",\n    value: function value(decl) {\n      if (decl.raws.value && decl.raws.value.value === decl.value) {\n        return decl.raws.value.raw;\n      } else {\n        return decl.value;\n      }\n    }\n    /**\n     * Save values with next prefixed token\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(decl, prefix) {\n      if (!decl._autoprefixerValues) {\n        decl._autoprefixerValues = {};\n      }\n\n      var value = decl._autoprefixerValues[prefix] || this.value(decl);\n      var before;\n\n      do {\n        before = value;\n        value = this.replace(value, prefix);\n        if (value === false) return;\n      } while (value !== before);\n\n      decl._autoprefixerValues[prefix] = value;\n    }\n    /**\n     * Return function to fast find prefixed value\n     */\n\n  }, {\n    key: \"old\",\n    value: function old(prefix) {\n      return new OldValue(this.name, prefix + this.name);\n    }\n  }], [{\n    key: \"save\",\n\n    /**\n     * Clone decl for each prefixed values\n     */\n    value: function save(prefixes, decl) {\n      var _this = this;\n\n      var prop = decl.prop;\n      var result = [];\n\n      var _loop = function _loop(prefix) {\n        var value = decl._autoprefixerValues[prefix];\n\n        if (value === decl.value) {\n          return \"continue\";\n        }\n\n        var item = void 0;\n        var propPrefix = vendor.prefix(prop);\n\n        if (propPrefix === '-pie-') {\n          return \"continue\";\n        }\n\n        if (propPrefix === prefix) {\n          item = decl.value = value;\n          result.push(item);\n          return \"continue\";\n        }\n\n        var prefixed = prefixes.prefixed(prop, prefix);\n        var rule = decl.parent;\n\n        if (!rule.every(function (i) {\n          return i.prop !== prefixed;\n        })) {\n          result.push(item);\n          return \"continue\";\n        }\n\n        var trimmed = value.replace(/\\s+/, ' ');\n        var already = rule.some(function (i) {\n          return i.prop === decl.prop && i.value.replace(/\\s+/, ' ') === trimmed;\n        });\n\n        if (already) {\n          result.push(item);\n          return \"continue\";\n        }\n\n        var cloned = _this.clone(decl, {\n          value: value\n        });\n\n        item = decl.parent.insertBefore(decl, cloned);\n        result.push(item);\n      };\n\n      for (var prefix in decl._autoprefixerValues) {\n        var _ret = _loop(prefix);\n\n        if (_ret === \"continue\") continue;\n      }\n\n      return result;\n    }\n  }]);\n\n  return Value;\n}(Prefixer);\n\nmodule.exports = Value;","map":null,"metadata":{},"sourceType":"script"}