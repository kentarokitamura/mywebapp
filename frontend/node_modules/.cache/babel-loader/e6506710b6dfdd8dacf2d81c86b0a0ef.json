{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction last(array) {\n  return array[array.length - 1];\n}\n\nvar brackets = {\n  /**\n   * Parse string to nodes tree\n   */\n  parse: function parse(str) {\n    var current = [''];\n    var stack = [current];\n\n    var _iterator = _createForOfIteratorHelper(str),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var sym = _step.value;\n\n        if (sym === '(') {\n          current = [''];\n          last(stack).push(current);\n          stack.push(current);\n          continue;\n        }\n\n        if (sym === ')') {\n          stack.pop();\n          current = last(stack);\n          current.push('');\n          continue;\n        }\n\n        current[current.length - 1] += sym;\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return stack[0];\n  },\n\n  /**\n   * Generate output string by nodes tree\n   */\n  stringify: function stringify(ast) {\n    var result = '';\n\n    var _iterator2 = _createForOfIteratorHelper(ast),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var i = _step2.value;\n\n        if (typeof i === 'object') {\n          result += \"(\".concat(brackets.stringify(i), \")\");\n          continue;\n        }\n\n        result += i;\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    return result;\n  }\n};\nmodule.exports = brackets;","map":null,"metadata":{},"sourceType":"script"}