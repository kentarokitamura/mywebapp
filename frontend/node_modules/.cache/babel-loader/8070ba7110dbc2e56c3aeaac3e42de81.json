{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _get = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar parser = require('postcss-value-parser');\n\nvar range = require('normalize-range');\n\nvar OldValue = require('../old-value');\n\nvar Value = require('../value');\n\nvar utils = require('../utils');\n\nvar IS_DIRECTION = /top|left|right|bottom/gi;\n\nvar Gradient = /*#__PURE__*/function (_Value) {\n  \"use strict\";\n\n  _inherits(Gradient, _Value);\n\n  function Gradient() {\n    _classCallCheck(this, Gradient);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Gradient).apply(this, arguments));\n  }\n\n  _createClass(Gradient, [{\n    key: \"replace\",\n\n    /**\n     * Change degrees for webkit prefix\n     */\n    value: function replace(string, prefix) {\n      var ast = parser(string);\n\n      var _iterator = _createForOfIteratorHelper(ast.nodes),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var node = _step.value;\n\n          if (node.type === 'function' && node.value === this.name) {\n            node.nodes = this.newDirection(node.nodes);\n            node.nodes = this.normalize(node.nodes);\n\n            if (prefix === '-webkit- old') {\n              var changes = this.oldWebkit(node);\n\n              if (!changes) {\n                return false;\n              }\n            } else {\n              node.nodes = this.convertDirection(node.nodes);\n              node.value = prefix + node.value;\n            }\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return ast.toString();\n    }\n    /**\n     * Replace first token\n     */\n\n  }, {\n    key: \"replaceFirst\",\n    value: function replaceFirst(params) {\n      for (var _len = arguments.length, words = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        words[_key - 1] = arguments[_key];\n      }\n\n      var prefix = words.map(function (i) {\n        if (i === ' ') {\n          return {\n            type: 'space',\n            value: i\n          };\n        }\n\n        return {\n          type: 'word',\n          value: i\n        };\n      });\n      return prefix.concat(params.slice(1));\n    }\n    /**\n     * Convert angle unit to deg\n     */\n\n  }, {\n    key: \"normalizeUnit\",\n    value: function normalizeUnit(str, full) {\n      var num = parseFloat(str);\n      var deg = num / full * 360;\n      return \"\".concat(deg, \"deg\");\n    }\n    /**\n     * Normalize angle\n     */\n\n  }, {\n    key: \"normalize\",\n    value: function normalize(nodes) {\n      if (!nodes[0]) return nodes;\n\n      if (/-?\\d+(.\\d+)?grad/.test(nodes[0].value)) {\n        nodes[0].value = this.normalizeUnit(nodes[0].value, 400);\n      } else if (/-?\\d+(.\\d+)?rad/.test(nodes[0].value)) {\n        nodes[0].value = this.normalizeUnit(nodes[0].value, 2 * Math.PI);\n      } else if (/-?\\d+(.\\d+)?turn/.test(nodes[0].value)) {\n        nodes[0].value = this.normalizeUnit(nodes[0].value, 1);\n      } else if (nodes[0].value.includes('deg')) {\n        var num = parseFloat(nodes[0].value);\n        num = range.wrap(0, 360, num);\n        nodes[0].value = \"\".concat(num, \"deg\");\n      }\n\n      if (nodes[0].value === '0deg') {\n        nodes = this.replaceFirst(nodes, 'to', ' ', 'top');\n      } else if (nodes[0].value === '90deg') {\n        nodes = this.replaceFirst(nodes, 'to', ' ', 'right');\n      } else if (nodes[0].value === '180deg') {\n        nodes = this.replaceFirst(nodes, 'to', ' ', 'bottom');\n      } else if (nodes[0].value === '270deg') {\n        nodes = this.replaceFirst(nodes, 'to', ' ', 'left');\n      }\n\n      return nodes;\n    }\n    /**\n     * Replace old direction to new\n     */\n\n  }, {\n    key: \"newDirection\",\n    value: function newDirection(params) {\n      if (params[0].value === 'to') {\n        return params;\n      }\n\n      IS_DIRECTION.lastIndex = 0; // reset search index of global regexp\n\n      if (!IS_DIRECTION.test(params[0].value)) {\n        return params;\n      }\n\n      params.unshift({\n        type: 'word',\n        value: 'to'\n      }, {\n        type: 'space',\n        value: ' '\n      });\n\n      for (var i = 2; i < params.length; i++) {\n        if (params[i].type === 'div') {\n          break;\n        }\n\n        if (params[i].type === 'word') {\n          params[i].value = this.revertDirection(params[i].value);\n        }\n      }\n\n      return params;\n    }\n    /**\n     * Look for at word\n     */\n\n  }, {\n    key: \"isRadial\",\n    value: function isRadial(params) {\n      var state = 'before';\n\n      var _iterator2 = _createForOfIteratorHelper(params),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var param = _step2.value;\n\n          if (state === 'before' && param.type === 'space') {\n            state = 'at';\n          } else if (state === 'at' && param.value === 'at') {\n            state = 'after';\n          } else if (state === 'after' && param.type === 'space') {\n            return true;\n          } else if (param.type === 'div') {\n            break;\n          } else {\n            state = 'before';\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return false;\n    }\n    /**\n     * Change new direction to old\n     */\n\n  }, {\n    key: \"convertDirection\",\n    value: function convertDirection(params) {\n      if (params.length > 0) {\n        if (params[0].value === 'to') {\n          this.fixDirection(params);\n        } else if (params[0].value.includes('deg')) {\n          this.fixAngle(params);\n        } else if (this.isRadial(params)) {\n          this.fixRadial(params);\n        }\n      }\n\n      return params;\n    }\n    /**\n     * Replace `to top left` to `bottom right`\n     */\n\n  }, {\n    key: \"fixDirection\",\n    value: function fixDirection(params) {\n      params.splice(0, 2);\n\n      var _iterator3 = _createForOfIteratorHelper(params),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var param = _step3.value;\n\n          if (param.type === 'div') {\n            break;\n          }\n\n          if (param.type === 'word') {\n            param.value = this.revertDirection(param.value);\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n    /**\n     * Add 90 degrees\n     */\n\n  }, {\n    key: \"fixAngle\",\n    value: function fixAngle(params) {\n      var first = params[0].value;\n      first = parseFloat(first);\n      first = Math.abs(450 - first) % 360;\n      first = this.roundFloat(first, 3);\n      params[0].value = \"\".concat(first, \"deg\");\n    }\n    /**\n     * Fix radial direction syntax\n     */\n\n  }, {\n    key: \"fixRadial\",\n    value: function fixRadial(params) {\n      var first = [];\n      var second = [];\n      var a, b, c, i, next;\n\n      for (i = 0; i < params.length - 2; i++) {\n        a = params[i];\n        b = params[i + 1];\n        c = params[i + 2];\n\n        if (a.type === 'space' && b.value === 'at' && c.type === 'space') {\n          next = i + 3;\n          break;\n        } else {\n          first.push(a);\n        }\n      }\n\n      var div;\n\n      for (i = next; i < params.length; i++) {\n        if (params[i].type === 'div') {\n          div = params[i];\n          break;\n        } else {\n          second.push(params[i]);\n        }\n      }\n\n      params.splice.apply(params, [0, i].concat(second, [div], first));\n    }\n  }, {\n    key: \"revertDirection\",\n    value: function revertDirection(word) {\n      return Gradient.directions[word.toLowerCase()] || word;\n    }\n    /**\n     * Round float and save digits under dot\n     */\n\n  }, {\n    key: \"roundFloat\",\n    value: function roundFloat(float, digits) {\n      return parseFloat(float.toFixed(digits));\n    }\n    /**\n     * Convert to old webkit syntax\n     */\n\n  }, {\n    key: \"oldWebkit\",\n    value: function oldWebkit(node) {\n      var nodes = node.nodes;\n      var string = parser.stringify(node.nodes);\n\n      if (this.name !== 'linear-gradient') {\n        return false;\n      }\n\n      if (nodes[0] && nodes[0].value.includes('deg')) {\n        return false;\n      }\n\n      if (string.includes('px') || string.includes('-corner') || string.includes('-side')) {\n        return false;\n      }\n\n      var params = [[]];\n\n      var _iterator4 = _createForOfIteratorHelper(nodes),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var i = _step4.value;\n          params[params.length - 1].push(i);\n\n          if (i.type === 'div' && i.value === ',') {\n            params.push([]);\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      this.oldDirection(params);\n      this.colorStops(params);\n      node.nodes = [];\n\n      for (var _i = 0, _params = params; _i < _params.length; _i++) {\n        var param = _params[_i];\n        node.nodes = node.nodes.concat(param);\n      }\n\n      node.nodes.unshift({\n        type: 'word',\n        value: 'linear'\n      }, this.cloneDiv(node.nodes));\n      node.value = '-webkit-gradient';\n      return true;\n    }\n    /**\n     * Change direction syntax to old webkit\n     */\n\n  }, {\n    key: \"oldDirection\",\n    value: function oldDirection(params) {\n      var div = this.cloneDiv(params[0]);\n\n      if (params[0][0].value !== 'to') {\n        return params.unshift([{\n          type: 'word',\n          value: Gradient.oldDirections.bottom\n        }, div]);\n      } else {\n        var words = [];\n\n        var _iterator5 = _createForOfIteratorHelper(params[0].slice(2)),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var node = _step5.value;\n\n            if (node.type === 'word') {\n              words.push(node.value.toLowerCase());\n            }\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n\n        words = words.join(' ');\n        var old = Gradient.oldDirections[words] || words;\n        params[0] = [{\n          type: 'word',\n          value: old\n        }, div];\n        return params[0];\n      }\n    }\n    /**\n     * Get div token from exists parameters\n     */\n\n  }, {\n    key: \"cloneDiv\",\n    value: function cloneDiv(params) {\n      var _iterator6 = _createForOfIteratorHelper(params),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var i = _step6.value;\n\n          if (i.type === 'div' && i.value === ',') {\n            return i;\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      return {\n        type: 'div',\n        value: ',',\n        after: ' '\n      };\n    }\n    /**\n     * Change colors syntax to old webkit\n     */\n\n  }, {\n    key: \"colorStops\",\n    value: function colorStops(params) {\n      var result = [];\n\n      for (var i = 0; i < params.length; i++) {\n        var pos = void 0;\n        var param = params[i];\n        var item = void 0;\n\n        if (i === 0) {\n          continue;\n        }\n\n        var color = parser.stringify(param[0]);\n\n        if (param[1] && param[1].type === 'word') {\n          pos = param[1].value;\n        } else if (param[2] && param[2].type === 'word') {\n          pos = param[2].value;\n        }\n\n        var stop = void 0;\n\n        if (i === 1 && (!pos || pos === '0%')) {\n          stop = \"from(\".concat(color, \")\");\n        } else if (i === params.length - 1 && (!pos || pos === '100%')) {\n          stop = \"to(\".concat(color, \")\");\n        } else if (pos) {\n          stop = \"color-stop(\".concat(pos, \", \").concat(color, \")\");\n        } else {\n          stop = \"color-stop(\".concat(color, \")\");\n        }\n\n        var div = param[param.length - 1];\n        params[i] = [{\n          type: 'word',\n          value: stop\n        }];\n\n        if (div.type === 'div' && div.value === ',') {\n          item = params[i].push(div);\n        }\n\n        result.push(item);\n      }\n\n      return result;\n    }\n    /**\n     * Remove old WebKit gradient too\n     */\n\n  }, {\n    key: \"old\",\n    value: function old(prefix) {\n      if (prefix === '-webkit-') {\n        var type = this.name === 'linear-gradient' ? 'linear' : 'radial';\n        var string = '-gradient';\n        var regexp = utils.regexp(\"-webkit-(\".concat(type, \"-gradient|gradient\\\\(\\\\s*\").concat(type, \")\"), false);\n        return new OldValue(this.name, prefix + this.name, string, regexp);\n      } else {\n        return _get(_getPrototypeOf(Gradient.prototype), \"old\", this).call(this, prefix);\n      }\n    }\n    /**\n     * Do not add non-webkit prefixes for list-style and object\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(decl, prefix) {\n      var p = decl.prop;\n\n      if (p.includes('mask')) {\n        if (prefix === '-webkit-' || prefix === '-webkit- old') {\n          return _get(_getPrototypeOf(Gradient.prototype), \"add\", this).call(this, decl, prefix);\n        }\n      } else if (p === 'list-style' || p === 'list-style-image' || p === 'content') {\n        if (prefix === '-webkit-' || prefix === '-webkit- old') {\n          return _get(_getPrototypeOf(Gradient.prototype), \"add\", this).call(this, decl, prefix);\n        }\n      } else {\n        return _get(_getPrototypeOf(Gradient.prototype), \"add\", this).call(this, decl, prefix);\n      }\n\n      return undefined;\n    }\n  }]);\n\n  return Gradient;\n}(Value);\n\nGradient.names = ['linear-gradient', 'repeating-linear-gradient', 'radial-gradient', 'repeating-radial-gradient'];\nGradient.directions = {\n  top: 'bottom',\n  left: 'right',\n  bottom: 'top',\n  right: 'left'\n}; // Direction to replace\n\nGradient.oldDirections = {\n  'top': 'left bottom, left top',\n  'left': 'right top, left top',\n  'bottom': 'left top, left bottom',\n  'right': 'left top, right top',\n  'top right': 'left bottom, right top',\n  'top left': 'right bottom, left top',\n  'right top': 'left bottom, right top',\n  'right bottom': 'left top, right bottom',\n  'bottom right': 'left top, right bottom',\n  'bottom left': 'right top, left bottom',\n  'left top': 'right bottom, left top',\n  'left bottom': 'right top, left bottom'\n};\nmodule.exports = Gradient;","map":null,"metadata":{},"sourceType":"script"}