{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _require = require('source-map-js'),\n    SourceMapConsumer = _require.SourceMapConsumer,\n    SourceMapGenerator = _require.SourceMapGenerator;\n\nvar _require2 = require('fs'),\n    existsSync = _require2.existsSync,\n    readFileSync = _require2.readFileSync;\n\nvar _require3 = require('path'),\n    dirname = _require3.dirname,\n    join = _require3.join;\n\nfunction fromBase64(str) {\n  if (Buffer) {\n    return Buffer.from(str, 'base64').toString();\n  } else {\n    /* c8 ignore next 2 */\n    return window.atob(str);\n  }\n}\n\nvar PreviousMap = /*#__PURE__*/function () {\n  function PreviousMap(css, opts) {\n    _classCallCheck(this, PreviousMap);\n\n    if (opts.map === false) return;\n    this.loadAnnotation(css);\n    this.inline = this.startWith(this.annotation, 'data:');\n    var prev = opts.map ? opts.map.prev : undefined;\n    var text = this.loadMap(opts.from, prev);\n\n    if (!this.mapFile && opts.from) {\n      this.mapFile = opts.from;\n    }\n\n    if (this.mapFile) this.root = dirname(this.mapFile);\n    if (text) this.text = text;\n  }\n\n  _createClass(PreviousMap, [{\n    key: \"consumer\",\n    value: function consumer() {\n      if (!this.consumerCache) {\n        this.consumerCache = new SourceMapConsumer(this.text);\n      }\n\n      return this.consumerCache;\n    }\n  }, {\n    key: \"withContent\",\n    value: function withContent() {\n      return !!(this.consumer().sourcesContent && this.consumer().sourcesContent.length > 0);\n    }\n  }, {\n    key: \"startWith\",\n    value: function startWith(string, start) {\n      if (!string) return false;\n      return string.substr(0, start.length) === start;\n    }\n  }, {\n    key: \"getAnnotationURL\",\n    value: function getAnnotationURL(sourceMapString) {\n      return sourceMapString.replace(/^\\/\\*\\s*# sourceMappingURL=/, '').trim();\n    }\n  }, {\n    key: \"loadAnnotation\",\n    value: function loadAnnotation(css) {\n      var comments = css.match(/\\/\\*\\s*# sourceMappingURL=/gm);\n      if (!comments) return; // sourceMappingURLs from comments, strings, etc.\n\n      var start = css.lastIndexOf(comments.pop());\n      var end = css.indexOf('*/', start);\n\n      if (start > -1 && end > -1) {\n        // Locate the last sourceMappingURL to avoid pickin\n        this.annotation = this.getAnnotationURL(css.substring(start, end));\n      }\n    }\n  }, {\n    key: \"decodeInline\",\n    value: function decodeInline(text) {\n      var baseCharsetUri = /^data:application\\/json;charset=utf-?8;base64,/;\n      var baseUri = /^data:application\\/json;base64,/;\n      var charsetUri = /^data:application\\/json;charset=utf-?8,/;\n      var uri = /^data:application\\/json,/;\n\n      if (charsetUri.test(text) || uri.test(text)) {\n        return decodeURIComponent(text.substr(RegExp.lastMatch.length));\n      }\n\n      if (baseCharsetUri.test(text) || baseUri.test(text)) {\n        return fromBase64(text.substr(RegExp.lastMatch.length));\n      }\n\n      var encoding = text.match(/data:application\\/json;([^,]+),/)[1];\n      throw new Error('Unsupported source map encoding ' + encoding);\n    }\n  }, {\n    key: \"loadFile\",\n    value: function loadFile(path) {\n      this.root = dirname(path);\n\n      if (existsSync(path)) {\n        this.mapFile = path;\n        return readFileSync(path, 'utf-8').toString().trim();\n      }\n    }\n  }, {\n    key: \"loadMap\",\n    value: function loadMap(file, prev) {\n      if (prev === false) return false;\n\n      if (prev) {\n        if (typeof prev === 'string') {\n          return prev;\n        } else if (typeof prev === 'function') {\n          var prevPath = prev(file);\n\n          if (prevPath) {\n            var map = this.loadFile(prevPath);\n\n            if (!map) {\n              throw new Error('Unable to load previous source map: ' + prevPath.toString());\n            }\n\n            return map;\n          }\n        } else if (prev instanceof SourceMapConsumer) {\n          return SourceMapGenerator.fromSourceMap(prev).toString();\n        } else if (prev instanceof SourceMapGenerator) {\n          return prev.toString();\n        } else if (this.isMap(prev)) {\n          return JSON.stringify(prev);\n        } else {\n          throw new Error('Unsupported previous source map format: ' + prev.toString());\n        }\n      } else if (this.inline) {\n        return this.decodeInline(this.annotation);\n      } else if (this.annotation) {\n        var _map = this.annotation;\n        if (file) _map = join(dirname(file), _map);\n        return this.loadFile(_map);\n      }\n    }\n  }, {\n    key: \"isMap\",\n    value: function isMap(map) {\n      if (typeof map !== 'object') return false;\n      return typeof map.mappings === 'string' || typeof map._mappings === 'string' || Array.isArray(map.sections);\n    }\n  }]);\n\n  return PreviousMap;\n}();\n\nmodule.exports = PreviousMap;\nPreviousMap.default = PreviousMap;","map":null,"metadata":{},"sourceType":"script"}