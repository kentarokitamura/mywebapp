{"ast":null,"code":"var _toConsumableArray = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar _require = require('postcss'),\n    list = _require.list;\n/**\n * Throw special error, to tell beniary,\n * that this error is from Autoprefixer.\n */\n\n\nmodule.exports.error = function (text) {\n  var err = new Error(text);\n  err.autoprefixer = true;\n  throw err;\n};\n/**\n * Return array, that doesnâ€™t contain duplicates.\n */\n\n\nmodule.exports.uniq = function (array) {\n  return _toConsumableArray(new Set(array));\n};\n/**\n * Return \"-webkit-\" on \"-webkit- old\"\n */\n\n\nmodule.exports.removeNote = function (string) {\n  if (!string.includes(' ')) {\n    return string;\n  }\n\n  return string.split(' ')[0];\n};\n/**\n * Escape RegExp symbols\n */\n\n\nmodule.exports.escapeRegexp = function (string) {\n  return string.replace(/[$()*+-.?[\\\\\\]^{|}]/g, '\\\\$&');\n};\n/**\n * Return regexp to check, that CSS string contain word\n */\n\n\nmodule.exports.regexp = function (word) {\n  var escape = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  if (escape) {\n    word = this.escapeRegexp(word);\n  }\n\n  return new RegExp(\"(^|[\\\\s,(])(\".concat(word, \"($|[\\\\s(,]))\"), 'gi');\n};\n/**\n * Change comma list\n */\n\n\nmodule.exports.editList = function (value, callback) {\n  var origin = list.comma(value);\n  var changed = callback(origin, []);\n\n  if (origin === changed) {\n    return value;\n  }\n\n  var join = value.match(/,\\s*/);\n  join = join ? join[0] : ', ';\n  return changed.join(join);\n};\n/**\n * Split the selector into parts.\n * It returns 3 level deep array because selectors can be comma\n * separated (1), space separated (2), and combined (3)\n * @param {String} selector selector string\n * @return {Array<Array<Array>>} 3 level deep array of split selector\n * @see utils.test.js for examples\n */\n\n\nmodule.exports.splitSelector = function (selector) {\n  return list.comma(selector).map(function (i) {\n    return list.space(i).map(function (k) {\n      return k.split(/(?=\\.|#)/g);\n    });\n  });\n};\n/**\n * Return true if a given value only contains numbers.\n * @param {*} value\n * @returns {boolean}\n */\n\n\nmodule.exports.isPureNumber = function (value) {\n  if (typeof value === 'number') {\n    return true;\n  }\n\n  if (typeof value === 'string') {\n    return /^[0-9]+$/.test(value);\n  }\n\n  return false;\n};","map":null,"metadata":{},"sourceType":"script"}