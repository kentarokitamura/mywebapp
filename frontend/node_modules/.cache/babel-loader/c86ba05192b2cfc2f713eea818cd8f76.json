{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar FractionJs = require('fraction.js');\n\nvar Prefixer = require('./prefixer');\n\nvar utils = require('./utils');\n\nvar REGEXP = /(min|max)-resolution\\s*:\\s*\\d*\\.?\\d+(dppx|dpcm|dpi|x)/gi;\nvar SPLIT = /(min|max)-resolution(\\s*:\\s*)(\\d*\\.?\\d+)(dppx|dpcm|dpi|x)/i;\n\nvar Resolution = /*#__PURE__*/function (_Prefixer) {\n  \"use strict\";\n\n  _inherits(Resolution, _Prefixer);\n\n  function Resolution() {\n    _classCallCheck(this, Resolution);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Resolution).apply(this, arguments));\n  }\n\n  _createClass(Resolution, [{\n    key: \"prefixName\",\n\n    /**\n     * Return prefixed query name\n     */\n    value: function prefixName(prefix, name) {\n      if (prefix === '-moz-') {\n        return name + '--moz-device-pixel-ratio';\n      } else {\n        return prefix + name + '-device-pixel-ratio';\n      }\n    }\n    /**\n     * Return prefixed query\n     */\n\n  }, {\n    key: \"prefixQuery\",\n    value: function prefixQuery(prefix, name, colon, value, units) {\n      value = new FractionJs(value); // 1dpcm = 2.54dpi\n      // 1dppx = 96dpi\n\n      if (units === 'dpi') {\n        value = value.div(96);\n      } else if (units === 'dpcm') {\n        value = value.mul(2.54).div(96);\n      }\n\n      value = value.simplify();\n\n      if (prefix === '-o-') {\n        value = value.n + '/' + value.d;\n      }\n\n      return this.prefixName(prefix, name) + colon + value;\n    }\n    /**\n     * Remove prefixed queries\n     */\n\n  }, {\n    key: \"clean\",\n    value: function clean(rule) {\n      var _this = this;\n\n      if (!this.bad) {\n        this.bad = [];\n\n        var _iterator = _createForOfIteratorHelper(this.prefixes),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var prefix = _step.value;\n            this.bad.push(this.prefixName(prefix, 'min'));\n            this.bad.push(this.prefixName(prefix, 'max'));\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      rule.params = utils.editList(rule.params, function (queries) {\n        return queries.filter(function (query) {\n          return _this.bad.every(function (i) {\n            return !query.includes(i);\n          });\n        });\n      });\n    }\n    /**\n     * Add prefixed queries\n     */\n\n  }, {\n    key: \"process\",\n    value: function process(rule) {\n      var _this2 = this;\n\n      var parent = this.parentPrefix(rule);\n      var prefixes = parent ? [parent] : this.prefixes;\n      rule.params = utils.editList(rule.params, function (origin, prefixed) {\n        var _iterator2 = _createForOfIteratorHelper(origin),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var query = _step2.value;\n\n            if (!query.includes('min-resolution') && !query.includes('max-resolution')) {\n              prefixed.push(query);\n              continue;\n            }\n\n            var _iterator3 = _createForOfIteratorHelper(prefixes),\n                _step3;\n\n            try {\n              var _loop = function _loop() {\n                var prefix = _step3.value;\n                var processed = query.replace(REGEXP, function (str) {\n                  var parts = str.match(SPLIT);\n                  return _this2.prefixQuery(prefix, parts[1], parts[2], parts[3], parts[4]);\n                });\n                prefixed.push(processed);\n              };\n\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                _loop();\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n\n            prefixed.push(query);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        return utils.uniq(prefixed);\n      });\n    }\n  }]);\n\n  return Resolution;\n}(Prefixer);\n\nmodule.exports = Resolution;","map":null,"metadata":{},"sourceType":"script"}