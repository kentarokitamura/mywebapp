{"ast":null,"code":"'use strict';\n\nvar CssSyntaxError = require('./css-syntax-error');\n\nvar Declaration = require('./declaration');\n\nvar LazyResult = require('./lazy-result');\n\nvar Container = require('./container');\n\nvar Processor = require('./processor');\n\nvar stringify = require('./stringify');\n\nvar fromJSON = require('./fromJSON');\n\nvar Document = require('./document');\n\nvar Warning = require('./warning');\n\nvar Comment = require('./comment');\n\nvar AtRule = require('./at-rule');\n\nvar Result = require('./result.js');\n\nvar Input = require('./input');\n\nvar parse = require('./parse');\n\nvar list = require('./list');\n\nvar Rule = require('./rule');\n\nvar Root = require('./root');\n\nvar Node = require('./node');\n\nfunction postcss() {\n  for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {\n    plugins[_key] = arguments[_key];\n  }\n\n  if (plugins.length === 1 && Array.isArray(plugins[0])) {\n    plugins = plugins[0];\n  }\n\n  return new Processor(plugins);\n}\n\npostcss.plugin = function plugin(name, initializer) {\n  var warningPrinted = false;\n\n  function creator() {\n    // eslint-disable-next-line no-console\n    if (console && console.warn && !warningPrinted) {\n      warningPrinted = true; // eslint-disable-next-line no-console\n\n      console.warn(name + ': postcss.plugin was deprecated. Migration guide:\\n' + 'https://evilmartians.com/chronicles/postcss-8-plugin-migration');\n\n      if (process.env.LANG && process.env.LANG.startsWith('cn')) {\n        /* c8 ignore next 7 */\n        // eslint-disable-next-line no-console\n        console.warn(name + ': 里面 postcss.plugin 被弃用. 迁移指南:\\n' + 'https://www.w3ctech.com/topic/2226');\n      }\n    }\n\n    var transformer = initializer.apply(void 0, arguments);\n    transformer.postcssPlugin = name;\n    transformer.postcssVersion = new Processor().version;\n    return transformer;\n  }\n\n  var cache;\n  Object.defineProperty(creator, 'postcss', {\n    get: function get() {\n      if (!cache) cache = creator();\n      return cache;\n    }\n  });\n\n  creator.process = function (css, processOpts, pluginOpts) {\n    return postcss([creator(pluginOpts)]).process(css, processOpts);\n  };\n\n  return creator;\n};\n\npostcss.stringify = stringify;\npostcss.parse = parse;\npostcss.fromJSON = fromJSON;\npostcss.list = list;\n\npostcss.comment = function (defaults) {\n  return new Comment(defaults);\n};\n\npostcss.atRule = function (defaults) {\n  return new AtRule(defaults);\n};\n\npostcss.decl = function (defaults) {\n  return new Declaration(defaults);\n};\n\npostcss.rule = function (defaults) {\n  return new Rule(defaults);\n};\n\npostcss.root = function (defaults) {\n  return new Root(defaults);\n};\n\npostcss.document = function (defaults) {\n  return new Document(defaults);\n};\n\npostcss.CssSyntaxError = CssSyntaxError;\npostcss.Declaration = Declaration;\npostcss.Container = Container;\npostcss.Processor = Processor;\npostcss.Document = Document;\npostcss.Comment = Comment;\npostcss.Warning = Warning;\npostcss.AtRule = AtRule;\npostcss.Result = Result;\npostcss.Input = Input;\npostcss.Rule = Rule;\npostcss.Root = Root;\npostcss.Node = Node;\nLazyResult.registerPostcss(postcss);\nmodule.exports = postcss;\npostcss.default = postcss;","map":null,"metadata":{},"sourceType":"script"}