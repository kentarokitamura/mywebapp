{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _get = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar Declaration = require('../declaration');\n\nvar _require = require('../utils'),\n    isPureNumber = _require.isPureNumber;\n\nvar GridEnd = /*#__PURE__*/function (_Declaration) {\n  \"use strict\";\n\n  _inherits(GridEnd, _Declaration);\n\n  function GridEnd() {\n    _classCallCheck(this, GridEnd);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GridEnd).apply(this, arguments));\n  }\n\n  _createClass(GridEnd, [{\n    key: \"insert\",\n\n    /**\n     * Change repeating syntax for IE\n     */\n    value: function insert(decl, prefix, prefixes, result) {\n      if (prefix !== '-ms-') return _get(_getPrototypeOf(GridEnd.prototype), \"insert\", this).call(this, decl, prefix, prefixes);\n      var clonedDecl = this.clone(decl);\n      var startProp = decl.prop.replace(/end$/, 'start');\n      var spanProp = prefix + decl.prop.replace(/end$/, 'span');\n\n      if (decl.parent.some(function (i) {\n        return i.prop === spanProp;\n      })) {\n        return undefined;\n      }\n\n      clonedDecl.prop = spanProp;\n\n      if (decl.value.includes('span')) {\n        clonedDecl.value = decl.value.replace(/span\\s/i, '');\n      } else {\n        var startDecl;\n        decl.parent.walkDecls(startProp, function (d) {\n          startDecl = d;\n        });\n\n        if (startDecl) {\n          if (isPureNumber(startDecl.value)) {\n            var value = Number(decl.value) - Number(startDecl.value) + '';\n            clonedDecl.value = value;\n          } else {\n            return undefined;\n          }\n        } else {\n          decl.warn(result, \"Can not prefix \".concat(decl.prop, \" (\").concat(startProp, \" is not found)\"));\n        }\n      }\n\n      decl.cloneBefore(clonedDecl);\n      return undefined;\n    }\n  }]);\n\n  return GridEnd;\n}(Declaration);\n\nGridEnd.names = ['grid-row-end', 'grid-column-end'];\nmodule.exports = GridEnd;","map":null,"metadata":{},"sourceType":"script"}