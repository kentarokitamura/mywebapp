{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar Browsers = require('./browsers');\n\nvar vendor = require('./vendor');\n\nvar utils = require('./utils');\n/**\n * Recursively clone objects\n */\n\n\nfunction _clone(obj, parent) {\n  var cloned = new obj.constructor();\n\n  for (var _i = 0, _Object$keys = Object.keys(obj || {}); _i < _Object$keys.length; _i++) {\n    var i = _Object$keys[_i];\n    var value = obj[i];\n\n    if (i === 'parent' && typeof value === 'object') {\n      if (parent) {\n        cloned[i] = parent;\n      }\n    } else if (i === 'source' || i === null) {\n      cloned[i] = value;\n    } else if (Array.isArray(value)) {\n      cloned[i] = value.map(function (x) {\n        return _clone(x, cloned);\n      });\n    } else if (i !== '_autoprefixerPrefix' && i !== '_autoprefixerValues' && i !== 'proxyCache') {\n      if (typeof value === 'object' && value !== null) {\n        value = _clone(value, cloned);\n      }\n\n      cloned[i] = value;\n    }\n  }\n\n  return cloned;\n}\n\nvar Prefixer = /*#__PURE__*/function () {\n  \"use strict\";\n\n  _createClass(Prefixer, null, [{\n    key: \"hack\",\n\n    /**\n     * Add hack to selected names\n     */\n    value: function hack(klass) {\n      var _this = this;\n\n      if (!this.hacks) {\n        this.hacks = {};\n      }\n\n      return klass.names.map(function (name) {\n        _this.hacks[name] = klass;\n        return _this.hacks[name];\n      });\n    }\n    /**\n     * Load hacks for some names\n     */\n\n  }, {\n    key: \"load\",\n    value: function load(name, prefixes, all) {\n      var Klass = this.hacks && this.hacks[name];\n\n      if (Klass) {\n        return new Klass(name, prefixes, all);\n      } else {\n        return new this(name, prefixes, all);\n      }\n    }\n    /**\n     * Clone node and clean autprefixer custom caches\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone(node, overrides) {\n      var cloned = _clone(node);\n\n      for (var name in overrides) {\n        cloned[name] = overrides[name];\n      }\n\n      return cloned;\n    }\n  }]);\n\n  function Prefixer(name, prefixes, all) {\n    _classCallCheck(this, Prefixer);\n\n    this.prefixes = prefixes;\n    this.name = name;\n    this.all = all;\n  }\n  /**\n   * Find prefix in node parents\n   */\n\n\n  _createClass(Prefixer, [{\n    key: \"parentPrefix\",\n    value: function parentPrefix(node) {\n      var prefix;\n\n      if (typeof node._autoprefixerPrefix !== 'undefined') {\n        prefix = node._autoprefixerPrefix;\n      } else if (node.type === 'decl' && node.prop[0] === '-') {\n        prefix = vendor.prefix(node.prop);\n      } else if (node.type === 'root') {\n        prefix = false;\n      } else if (node.type === 'rule' && node.selector.includes(':-') && /:(-\\w+-)/.test(node.selector)) {\n        prefix = node.selector.match(/:(-\\w+-)/)[1];\n      } else if (node.type === 'atrule' && node.name[0] === '-') {\n        prefix = vendor.prefix(node.name);\n      } else {\n        prefix = this.parentPrefix(node.parent);\n      }\n\n      if (!Browsers.prefixes().includes(prefix)) {\n        prefix = false;\n      }\n\n      node._autoprefixerPrefix = prefix;\n      return node._autoprefixerPrefix;\n    }\n    /**\n     * Clone node with prefixes\n     */\n\n  }, {\n    key: \"process\",\n    value: function process(node, result) {\n      if (!this.check(node)) {\n        return undefined;\n      }\n\n      var parent = this.parentPrefix(node);\n      var prefixes = this.prefixes.filter(function (prefix) {\n        return !parent || parent === utils.removeNote(prefix);\n      });\n      var added = [];\n\n      var _iterator = _createForOfIteratorHelper(prefixes),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var prefix = _step.value;\n\n          if (this.add(node, prefix, added.concat([prefix]), result)) {\n            added.push(prefix);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return added;\n    }\n    /**\n     * Shortcut for Prefixer.clone\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone(node, overrides) {\n      return Prefixer.clone(node, overrides);\n    }\n  }]);\n\n  return Prefixer;\n}();\n\nmodule.exports = Prefixer;","map":null,"metadata":{},"sourceType":"script"}