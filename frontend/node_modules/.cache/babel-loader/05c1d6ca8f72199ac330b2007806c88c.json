{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar parser = require('postcss-value-parser');\n\nvar Value = require('./value');\n\nvar insertAreas = require('./hacks/grid-utils').insertAreas;\n\nvar OLD_LINEAR = /(^|[^-])linear-gradient\\(\\s*(top|left|right|bottom)/i;\nvar OLD_RADIAL = /(^|[^-])radial-gradient\\(\\s*\\d+(\\w*|%)\\s+\\d+(\\w*|%)\\s*,/i;\nvar IGNORE_NEXT = /(!\\s*)?autoprefixer:\\s*ignore\\s+next/i;\nvar GRID_REGEX = /(!\\s*)?autoprefixer\\s*grid:\\s*(on|off|(no-)?autoplace)/i;\nvar SIZES = ['width', 'height', 'min-width', 'max-width', 'min-height', 'max-height', 'inline-size', 'min-inline-size', 'max-inline-size', 'block-size', 'min-block-size', 'max-block-size'];\n\nfunction hasGridTemplate(decl) {\n  return decl.parent.some(function (i) {\n    return i.prop === 'grid-template' || i.prop === 'grid-template-areas';\n  });\n}\n\nfunction hasRowsAndColumns(decl) {\n  var hasRows = decl.parent.some(function (i) {\n    return i.prop === 'grid-template-rows';\n  });\n  var hasColumns = decl.parent.some(function (i) {\n    return i.prop === 'grid-template-columns';\n  });\n  return hasRows && hasColumns;\n}\n\nvar Processor = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function Processor(prefixes) {\n    _classCallCheck(this, Processor);\n\n    this.prefixes = prefixes;\n  }\n  /**\n   * Add necessary prefixes\n   */\n\n\n  _createClass(Processor, [{\n    key: \"add\",\n    value: function add(css, result) {\n      var _this = this;\n\n      // At-rules\n      var resolution = this.prefixes.add['@resolution'];\n      var keyframes = this.prefixes.add['@keyframes'];\n      var viewport = this.prefixes.add['@viewport'];\n      var supports = this.prefixes.add['@supports'];\n      css.walkAtRules(function (rule) {\n        if (rule.name === 'keyframes') {\n          if (!_this.disabled(rule, result)) {\n            return keyframes && keyframes.process(rule);\n          }\n        } else if (rule.name === 'viewport') {\n          if (!_this.disabled(rule, result)) {\n            return viewport && viewport.process(rule);\n          }\n        } else if (rule.name === 'supports') {\n          if (_this.prefixes.options.supports !== false && !_this.disabled(rule, result)) {\n            return supports.process(rule);\n          }\n        } else if (rule.name === 'media' && rule.params.includes('-resolution')) {\n          if (!_this.disabled(rule, result)) {\n            return resolution && resolution.process(rule);\n          }\n        }\n\n        return undefined;\n      }); // Selectors\n\n      css.walkRules(function (rule) {\n        if (_this.disabled(rule, result)) return undefined;\n        return _this.prefixes.add.selectors.map(function (selector) {\n          return selector.process(rule, result);\n        });\n      });\n\n      function insideGrid(decl) {\n        return decl.parent.nodes.some(function (node) {\n          if (node.type !== 'decl') return false;\n          var displayGrid = node.prop === 'display' && /(inline-)?grid/.test(node.value);\n          var gridTemplate = node.prop.startsWith('grid-template');\n          var gridGap = /^grid-([A-z]+-)?gap/.test(node.prop);\n          return displayGrid || gridTemplate || gridGap;\n        });\n      }\n\n      function insideFlex(decl) {\n        return decl.parent.some(function (node) {\n          return node.prop === 'display' && /(inline-)?flex/.test(node.value);\n        });\n      }\n\n      var gridPrefixes = this.gridStatus(css, result) && this.prefixes.add['grid-area'] && this.prefixes.add['grid-area'].prefixes;\n      css.walkDecls(function (decl) {\n        if (_this.disabledDecl(decl, result)) return undefined;\n        var parent = decl.parent;\n        var prop = decl.prop;\n        var value = decl.value;\n\n        if (prop === 'color-adjust') {\n          result.warn('Replace color-adjust to print-color-adjust. ' + 'The color-adjust shorthand is currently deprecated.', {\n            node: decl\n          });\n        } else if (prop === 'grid-row-span') {\n          result.warn('grid-row-span is not part of final Grid Layout. Use grid-row.', {\n            node: decl\n          });\n          return undefined;\n        } else if (prop === 'grid-column-span') {\n          result.warn('grid-column-span is not part of final Grid Layout. Use grid-column.', {\n            node: decl\n          });\n          return undefined;\n        } else if (prop === 'display' && value === 'box') {\n          result.warn('You should write display: flex by final spec ' + 'instead of display: box', {\n            node: decl\n          });\n          return undefined;\n        } else if (prop === 'text-emphasis-position') {\n          if (value === 'under' || value === 'over') {\n            result.warn('You should use 2 values for text-emphasis-position ' + 'For example, `under left` instead of just `under`.', {\n              node: decl\n            });\n          }\n        } else if (/^(align|justify|place)-(items|content)$/.test(prop) && insideFlex(decl)) {\n          if (value === 'start' || value === 'end') {\n            result.warn(\"\".concat(value, \" value has mixed support, consider using \") + \"flex-\".concat(value, \" instead\"), {\n              node: decl\n            });\n          }\n        } else if (prop === 'text-decoration-skip' && value === 'ink') {\n          result.warn('Replace text-decoration-skip: ink to ' + 'text-decoration-skip-ink: auto, because spec had been changed', {\n            node: decl\n          });\n        } else {\n          if (gridPrefixes && _this.gridStatus(decl, result)) {\n            if (decl.value === 'subgrid') {\n              result.warn('IE does not support subgrid', {\n                node: decl\n              });\n            }\n\n            if (/^(align|justify|place)-items$/.test(prop) && insideGrid(decl)) {\n              var fixed = prop.replace('-items', '-self');\n              result.warn(\"IE does not support \".concat(prop, \" on grid containers. \") + \"Try using \".concat(fixed, \" on child elements instead: \") + \"\".concat(decl.parent.selector, \" > * { \").concat(fixed, \": \").concat(decl.value, \" }\"), {\n                node: decl\n              });\n            } else if (/^(align|justify|place)-content$/.test(prop) && insideGrid(decl)) {\n              result.warn(\"IE does not support \".concat(decl.prop, \" on grid containers\"), {\n                node: decl\n              });\n            } else if (prop === 'display' && decl.value === 'contents') {\n              result.warn('Please do not use display: contents; ' + 'if you have grid setting enabled', {\n                node: decl\n              });\n              return undefined;\n            } else if (decl.prop === 'grid-gap') {\n              var status = _this.gridStatus(decl, result);\n\n              if (status === 'autoplace' && !hasRowsAndColumns(decl) && !hasGridTemplate(decl)) {\n                result.warn('grid-gap only works if grid-template(-areas) is being ' + 'used or both rows and columns have been declared ' + 'and cells have not been manually ' + 'placed inside the explicit grid', {\n                  node: decl\n                });\n              } else if ((status === true || status === 'no-autoplace') && !hasGridTemplate(decl)) {\n                result.warn('grid-gap only works if grid-template(-areas) is being used', {\n                  node: decl\n                });\n              }\n            } else if (prop === 'grid-auto-columns') {\n              result.warn('grid-auto-columns is not supported by IE', {\n                node: decl\n              });\n              return undefined;\n            } else if (prop === 'grid-auto-rows') {\n              result.warn('grid-auto-rows is not supported by IE', {\n                node: decl\n              });\n              return undefined;\n            } else if (prop === 'grid-auto-flow') {\n              var hasRows = parent.some(function (i) {\n                return i.prop === 'grid-template-rows';\n              });\n              var hasCols = parent.some(function (i) {\n                return i.prop === 'grid-template-columns';\n              });\n\n              if (hasGridTemplate(decl)) {\n                result.warn('grid-auto-flow is not supported by IE', {\n                  node: decl\n                });\n              } else if (value.includes('dense')) {\n                result.warn('grid-auto-flow: dense is not supported by IE', {\n                  node: decl\n                });\n              } else if (!hasRows && !hasCols) {\n                result.warn('grid-auto-flow works only if grid-template-rows and ' + 'grid-template-columns are present in the same rule', {\n                  node: decl\n                });\n              }\n\n              return undefined;\n            } else if (value.includes('auto-fit')) {\n              result.warn('auto-fit value is not supported by IE', {\n                node: decl,\n                word: 'auto-fit'\n              });\n              return undefined;\n            } else if (value.includes('auto-fill')) {\n              result.warn('auto-fill value is not supported by IE', {\n                node: decl,\n                word: 'auto-fill'\n              });\n              return undefined;\n            } else if (prop.startsWith('grid-template') && value.includes('[')) {\n              result.warn('Autoprefixer currently does not support line names. ' + 'Try using grid-template-areas instead.', {\n                node: decl,\n                word: '['\n              });\n            }\n          }\n\n          if (value.includes('radial-gradient')) {\n            if (OLD_RADIAL.test(decl.value)) {\n              result.warn('Gradient has outdated direction syntax. ' + 'New syntax is like `closest-side at 0 0` ' + 'instead of `0 0, closest-side`.', {\n                node: decl\n              });\n            } else {\n              var ast = parser(value);\n\n              var _iterator = _createForOfIteratorHelper(ast.nodes),\n                  _step;\n\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  var i = _step.value;\n\n                  if (i.type === 'function' && i.value === 'radial-gradient') {\n                    var _iterator2 = _createForOfIteratorHelper(i.nodes),\n                        _step2;\n\n                    try {\n                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                        var word = _step2.value;\n\n                        if (word.type === 'word') {\n                          if (word.value === 'cover') {\n                            result.warn('Gradient has outdated direction syntax. ' + 'Replace `cover` to `farthest-corner`.', {\n                              node: decl\n                            });\n                          } else if (word.value === 'contain') {\n                            result.warn('Gradient has outdated direction syntax. ' + 'Replace `contain` to `closest-side`.', {\n                              node: decl\n                            });\n                          }\n                        }\n                      }\n                    } catch (err) {\n                      _iterator2.e(err);\n                    } finally {\n                      _iterator2.f();\n                    }\n                  }\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n            }\n          }\n\n          if (value.includes('linear-gradient')) {\n            if (OLD_LINEAR.test(value)) {\n              result.warn('Gradient has outdated direction syntax. ' + 'New syntax is like `to left` instead of `right`.', {\n                node: decl\n              });\n            }\n          }\n        }\n\n        if (SIZES.includes(decl.prop)) {\n          if (!decl.value.includes('-fill-available')) {\n            if (decl.value.includes('fill-available')) {\n              result.warn('Replace fill-available to stretch, ' + 'because spec had been changed', {\n                node: decl\n              });\n            } else if (decl.value.includes('fill')) {\n              var _ast = parser(value);\n\n              if (_ast.nodes.some(function (i) {\n                return i.type === 'word' && i.value === 'fill';\n              })) {\n                result.warn('Replace fill to stretch, because spec had been changed', {\n                  node: decl\n                });\n              }\n            }\n          }\n        }\n\n        var prefixer;\n\n        if (decl.prop === 'transition' || decl.prop === 'transition-property') {\n          // Transition\n          return _this.prefixes.transition.add(decl, result);\n        } else if (decl.prop === 'align-self') {\n          // align-self flexbox or grid\n          var display = _this.displayType(decl);\n\n          if (display !== 'grid' && _this.prefixes.options.flexbox !== false) {\n            prefixer = _this.prefixes.add['align-self'];\n\n            if (prefixer && prefixer.prefixes) {\n              prefixer.process(decl);\n            }\n          }\n\n          if (_this.gridStatus(decl, result) !== false) {\n            prefixer = _this.prefixes.add['grid-row-align'];\n\n            if (prefixer && prefixer.prefixes) {\n              return prefixer.process(decl, result);\n            }\n          }\n        } else if (decl.prop === 'justify-self') {\n          // justify-self flexbox or grid\n          if (_this.gridStatus(decl, result) !== false) {\n            prefixer = _this.prefixes.add['grid-column-align'];\n\n            if (prefixer && prefixer.prefixes) {\n              return prefixer.process(decl, result);\n            }\n          }\n        } else if (decl.prop === 'place-self') {\n          prefixer = _this.prefixes.add['place-self'];\n\n          if (prefixer && prefixer.prefixes && _this.gridStatus(decl, result) !== false) {\n            return prefixer.process(decl, result);\n          }\n        } else {\n          // Properties\n          prefixer = _this.prefixes.add[decl.prop];\n\n          if (prefixer && prefixer.prefixes) {\n            return prefixer.process(decl, result);\n          }\n        }\n\n        return undefined;\n      }); // Insert grid-area prefixes. We need to be able to store the different\n      // rules as a data and hack API is not enough for this\n\n      if (this.gridStatus(css, result)) {\n        insertAreas(css, this.disabled);\n      } // Values\n\n\n      return css.walkDecls(function (decl) {\n        if (_this.disabledValue(decl, result)) return;\n\n        var unprefixed = _this.prefixes.unprefixed(decl.prop);\n\n        var list = _this.prefixes.values('add', unprefixed);\n\n        if (Array.isArray(list)) {\n          var _iterator3 = _createForOfIteratorHelper(list),\n              _step3;\n\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var value = _step3.value;\n              if (value.process) value.process(decl, result);\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n        }\n\n        Value.save(_this.prefixes, decl);\n      });\n    }\n    /**\n     * Remove unnecessary pefixes\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(css, result) {\n      var _this2 = this;\n\n      // At-rules\n      var resolution = this.prefixes.remove['@resolution'];\n      css.walkAtRules(function (rule, i) {\n        if (_this2.prefixes.remove[\"@\".concat(rule.name)]) {\n          if (!_this2.disabled(rule, result)) {\n            rule.parent.removeChild(i);\n          }\n        } else if (rule.name === 'media' && rule.params.includes('-resolution') && resolution) {\n          resolution.clean(rule);\n        }\n      }); // Selectors\n\n      var _iterator4 = _createForOfIteratorHelper(this.prefixes.remove.selectors),\n          _step4;\n\n      try {\n        var _loop = function _loop() {\n          var checker = _step4.value;\n          css.walkRules(function (rule, i) {\n            if (checker.check(rule)) {\n              if (!_this2.disabled(rule, result)) {\n                rule.parent.removeChild(i);\n              }\n            }\n          });\n        };\n\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      return css.walkDecls(function (decl, i) {\n        if (_this2.disabled(decl, result)) return;\n        var rule = decl.parent;\n\n        var unprefixed = _this2.prefixes.unprefixed(decl.prop); // Transition\n\n\n        if (decl.prop === 'transition' || decl.prop === 'transition-property') {\n          _this2.prefixes.transition.remove(decl);\n        } // Properties\n\n\n        if (_this2.prefixes.remove[decl.prop] && _this2.prefixes.remove[decl.prop].remove) {\n          var notHack = _this2.prefixes.group(decl).down(function (other) {\n            return _this2.prefixes.normalize(other.prop) === unprefixed;\n          });\n\n          if (unprefixed === 'flex-flow') {\n            notHack = true;\n          }\n\n          if (decl.prop === '-webkit-box-orient') {\n            var hacks = {\n              'flex-direction': true,\n              'flex-flow': true\n            };\n            if (!decl.parent.some(function (j) {\n              return hacks[j.prop];\n            })) return;\n          }\n\n          if (notHack && !_this2.withHackValue(decl)) {\n            if (decl.raw('before').includes('\\n')) {\n              _this2.reduceSpaces(decl);\n            }\n\n            rule.removeChild(i);\n            return;\n          }\n        } // Values\n\n\n        var _iterator5 = _createForOfIteratorHelper(_this2.prefixes.values('remove', unprefixed)),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var checker = _step5.value;\n            if (!checker.check) continue;\n            if (!checker.check(decl.value)) continue;\n            unprefixed = checker.unprefixed;\n\n            var _notHack = _this2.prefixes.group(decl).down(function (other) {\n              return other.value.includes(unprefixed);\n            });\n\n            if (_notHack) {\n              rule.removeChild(i);\n              return;\n            }\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      });\n    }\n    /**\n     * Some rare old values, which is not in standard\n     */\n\n  }, {\n    key: \"withHackValue\",\n    value: function withHackValue(decl) {\n      return decl.prop === '-webkit-background-clip' && decl.value === 'text';\n    }\n    /**\n     * Check for grid/flexbox options.\n     */\n\n  }, {\n    key: \"disabledValue\",\n    value: function disabledValue(node, result) {\n      if (this.gridStatus(node, result) === false && node.type === 'decl') {\n        if (node.prop === 'display' && node.value.includes('grid')) {\n          return true;\n        }\n      }\n\n      if (this.prefixes.options.flexbox === false && node.type === 'decl') {\n        if (node.prop === 'display' && node.value.includes('flex')) {\n          return true;\n        }\n      }\n\n      if (node.type === 'decl' && node.prop === 'content') {\n        return true;\n      }\n\n      return this.disabled(node, result);\n    }\n    /**\n     * Check for grid/flexbox options.\n     */\n\n  }, {\n    key: \"disabledDecl\",\n    value: function disabledDecl(node, result) {\n      if (this.gridStatus(node, result) === false && node.type === 'decl') {\n        if (node.prop.includes('grid') || node.prop === 'justify-items') {\n          return true;\n        }\n      }\n\n      if (this.prefixes.options.flexbox === false && node.type === 'decl') {\n        var other = ['order', 'justify-content', 'align-items', 'align-content'];\n\n        if (node.prop.includes('flex') || other.includes(node.prop)) {\n          return true;\n        }\n      }\n\n      return this.disabled(node, result);\n    }\n    /**\n     * Check for control comment and global options\n     */\n\n  }, {\n    key: \"disabled\",\n    value: function disabled(node, result) {\n      if (!node) return false;\n\n      if (node._autoprefixerDisabled !== undefined) {\n        return node._autoprefixerDisabled;\n      }\n\n      if (node.parent) {\n        var p = node.prev();\n\n        if (p && p.type === 'comment' && IGNORE_NEXT.test(p.text)) {\n          node._autoprefixerDisabled = true;\n          node._autoprefixerSelfDisabled = true;\n          return true;\n        }\n      }\n\n      var value = null;\n\n      if (node.nodes) {\n        var status;\n        node.each(function (i) {\n          if (i.type !== 'comment') return;\n\n          if (/(!\\s*)?autoprefixer:\\s*(off|on)/i.test(i.text)) {\n            if (typeof status !== 'undefined') {\n              result.warn('Second Autoprefixer control comment ' + 'was ignored. Autoprefixer applies control ' + 'comment to whole block, not to next rules.', {\n                node: i\n              });\n            } else {\n              status = /on/i.test(i.text);\n            }\n          }\n        });\n\n        if (status !== undefined) {\n          value = !status;\n        }\n      }\n\n      if (!node.nodes || value === null) {\n        if (node.parent) {\n          var isParentDisabled = this.disabled(node.parent, result);\n\n          if (node.parent._autoprefixerSelfDisabled === true) {\n            value = false;\n          } else {\n            value = isParentDisabled;\n          }\n        } else {\n          value = false;\n        }\n      }\n\n      node._autoprefixerDisabled = value;\n      return value;\n    }\n    /**\n     * Normalize spaces in cascade declaration group\n     */\n\n  }, {\n    key: \"reduceSpaces\",\n    value: function reduceSpaces(decl) {\n      var stop = false;\n      this.prefixes.group(decl).up(function () {\n        stop = true;\n        return true;\n      });\n\n      if (stop) {\n        return;\n      }\n\n      var parts = decl.raw('before').split('\\n');\n      var prevMin = parts[parts.length - 1].length;\n      var diff = false;\n      this.prefixes.group(decl).down(function (other) {\n        parts = other.raw('before').split('\\n');\n        var last = parts.length - 1;\n\n        if (parts[last].length > prevMin) {\n          if (diff === false) {\n            diff = parts[last].length - prevMin;\n          }\n\n          parts[last] = parts[last].slice(0, -diff);\n          other.raws.before = parts.join('\\n');\n        }\n      });\n    }\n    /**\n     * Is it flebox or grid rule\n     */\n\n  }, {\n    key: \"displayType\",\n    value: function displayType(decl) {\n      var _iterator6 = _createForOfIteratorHelper(decl.parent.nodes),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var i = _step6.value;\n\n          if (i.prop !== 'display') {\n            continue;\n          }\n\n          if (i.value.includes('flex')) {\n            return 'flex';\n          }\n\n          if (i.value.includes('grid')) {\n            return 'grid';\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      return false;\n    }\n    /**\n     * Set grid option via control comment\n     */\n\n  }, {\n    key: \"gridStatus\",\n    value: function gridStatus(node, result) {\n      if (!node) return false;\n\n      if (node._autoprefixerGridStatus !== undefined) {\n        return node._autoprefixerGridStatus;\n      }\n\n      var value = null;\n\n      if (node.nodes) {\n        var status;\n        node.each(function (i) {\n          if (i.type !== 'comment') return;\n\n          if (GRID_REGEX.test(i.text)) {\n            var hasAutoplace = /:\\s*autoplace/i.test(i.text);\n            var noAutoplace = /no-autoplace/i.test(i.text);\n\n            if (typeof status !== 'undefined') {\n              result.warn('Second Autoprefixer grid control comment was ' + 'ignored. Autoprefixer applies control comments to the whole ' + 'block, not to the next rules.', {\n                node: i\n              });\n            } else if (hasAutoplace) {\n              status = 'autoplace';\n            } else if (noAutoplace) {\n              status = true;\n            } else {\n              status = /on/i.test(i.text);\n            }\n          }\n        });\n\n        if (status !== undefined) {\n          value = status;\n        }\n      }\n\n      if (node.type === 'atrule' && node.name === 'supports') {\n        var params = node.params;\n\n        if (params.includes('grid') && params.includes('auto')) {\n          value = false;\n        }\n      }\n\n      if (!node.nodes || value === null) {\n        if (node.parent) {\n          var isParentGrid = this.gridStatus(node.parent, result);\n\n          if (node.parent._autoprefixerSelfDisabled === true) {\n            value = false;\n          } else {\n            value = isParentGrid;\n          }\n        } else if (typeof this.prefixes.options.grid !== 'undefined') {\n          value = this.prefixes.options.grid;\n        } else if (typeof process.env.AUTOPREFIXER_GRID !== 'undefined') {\n          if (process.env.AUTOPREFIXER_GRID === 'autoplace') {\n            value = 'autoplace';\n          } else {\n            value = true;\n          }\n        } else {\n          value = false;\n        }\n      }\n\n      node._autoprefixerGridStatus = value;\n      return value;\n    }\n  }]);\n\n  return Processor;\n}();\n\nmodule.exports = Processor;","map":null,"metadata":{},"sourceType":"script"}