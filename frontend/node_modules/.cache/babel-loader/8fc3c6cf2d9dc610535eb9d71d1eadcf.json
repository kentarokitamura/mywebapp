{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar Declaration = require('../declaration');\n\nvar MaskComposite = /*#__PURE__*/function (_Declaration) {\n  \"use strict\";\n\n  _inherits(MaskComposite, _Declaration);\n\n  function MaskComposite() {\n    _classCallCheck(this, MaskComposite);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MaskComposite).apply(this, arguments));\n  }\n\n  _createClass(MaskComposite, [{\n    key: \"insert\",\n\n    /**\n     * Prefix mask-composite for webkit\n     */\n    value: function insert(decl, prefix, prefixes) {\n      var isCompositeProp = decl.prop === 'mask-composite';\n      var compositeValues;\n\n      if (isCompositeProp) {\n        compositeValues = decl.value.split(',');\n      } else {\n        compositeValues = decl.value.match(MaskComposite.regexp) || [];\n      }\n\n      compositeValues = compositeValues.map(function (el) {\n        return el.trim();\n      }).filter(function (el) {\n        return el;\n      });\n      var hasCompositeValues = compositeValues.length;\n      var compositeDecl;\n\n      if (hasCompositeValues) {\n        compositeDecl = this.clone(decl);\n        compositeDecl.value = compositeValues.map(function (value) {\n          return MaskComposite.oldValues[value] || value;\n        }).join(', ');\n\n        if (compositeValues.includes('intersect')) {\n          compositeDecl.value += ', xor';\n        }\n\n        compositeDecl.prop = prefix + 'mask-composite';\n      }\n\n      if (isCompositeProp) {\n        if (!hasCompositeValues) {\n          return undefined;\n        }\n\n        if (this.needCascade(decl)) {\n          compositeDecl.raws.before = this.calcBefore(prefixes, decl, prefix);\n        }\n\n        return decl.parent.insertBefore(decl, compositeDecl);\n      }\n\n      var cloned = this.clone(decl);\n      cloned.prop = prefix + cloned.prop;\n\n      if (hasCompositeValues) {\n        cloned.value = cloned.value.replace(MaskComposite.regexp, '');\n      }\n\n      if (this.needCascade(decl)) {\n        cloned.raws.before = this.calcBefore(prefixes, decl, prefix);\n      }\n\n      decl.parent.insertBefore(decl, cloned);\n\n      if (!hasCompositeValues) {\n        return decl;\n      }\n\n      if (this.needCascade(decl)) {\n        compositeDecl.raws.before = this.calcBefore(prefixes, decl, prefix);\n      }\n\n      return decl.parent.insertBefore(decl, compositeDecl);\n    }\n  }]);\n\n  return MaskComposite;\n}(Declaration);\n\nMaskComposite.names = ['mask', 'mask-composite'];\nMaskComposite.oldValues = {\n  add: 'source-over',\n  subtract: 'source-out',\n  intersect: 'source-in',\n  exclude: 'xor'\n};\nMaskComposite.regexp = new RegExp(\"\\\\s+(\".concat(Object.keys(MaskComposite.oldValues).join('|'), \")\\\\b(?!\\\\))\\\\s*(?=[,])\"), 'ig');\nmodule.exports = MaskComposite;","map":null,"metadata":{},"sourceType":"script"}