{"ast":null,"code":"var _slicedToArray = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar OldSelector = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function OldSelector(selector, prefix) {\n    _classCallCheck(this, OldSelector);\n\n    this.prefix = prefix;\n    this.prefixed = selector.prefixed(this.prefix);\n    this.regexp = selector.regexp(this.prefix);\n    this.prefixeds = selector.possible().map(function (x) {\n      return [selector.prefixed(x), selector.regexp(x)];\n    });\n    this.unprefixed = selector.name;\n    this.nameRegexp = selector.regexp();\n  }\n  /**\n   * Is rule a hack without unprefixed version bottom\n   */\n\n\n  _createClass(OldSelector, [{\n    key: \"isHack\",\n    value: function isHack(rule) {\n      var index = rule.parent.index(rule) + 1;\n      var rules = rule.parent.nodes;\n\n      while (index < rules.length) {\n        var before = rules[index].selector;\n\n        if (!before) {\n          return true;\n        }\n\n        if (before.includes(this.unprefixed) && before.match(this.nameRegexp)) {\n          return false;\n        }\n\n        var some = false;\n\n        var _iterator = _createForOfIteratorHelper(this.prefixeds),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _step$value = _slicedToArray(_step.value, 2),\n                string = _step$value[0],\n                regexp = _step$value[1];\n\n            if (before.includes(string) && before.match(regexp)) {\n              some = true;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        if (!some) {\n          return true;\n        }\n\n        index += 1;\n      }\n\n      return true;\n    }\n    /**\n     * Does rule contain an unnecessary prefixed selector\n     */\n\n  }, {\n    key: \"check\",\n    value: function check(rule) {\n      if (!rule.selector.includes(this.prefixed)) {\n        return false;\n      }\n\n      if (!rule.selector.match(this.regexp)) {\n        return false;\n      }\n\n      if (this.isHack(rule)) {\n        return false;\n      }\n\n      return true;\n    }\n  }]);\n\n  return OldSelector;\n}();\n\nmodule.exports = OldSelector;","map":null,"metadata":{},"sourceType":"script"}