{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _get = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar Prefixer = require('./prefixer');\n\nvar Browsers = require('./browsers');\n\nvar utils = require('./utils');\n\nvar Declaration = /*#__PURE__*/function (_Prefixer) {\n  \"use strict\";\n\n  _inherits(Declaration, _Prefixer);\n\n  function Declaration() {\n    _classCallCheck(this, Declaration);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Declaration).apply(this, arguments));\n  }\n\n  _createClass(Declaration, [{\n    key: \"check\",\n\n    /**\n     * Always true, because we already get prefixer by property name\n     */\n    value: function check() {\n      return true;\n    }\n    /**\n     * Return prefixed version of property\n     */\n\n  }, {\n    key: \"prefixed\",\n    value: function prefixed(prop, prefix) {\n      return prefix + prop;\n    }\n    /**\n     * Return unprefixed version of property\n     */\n\n  }, {\n    key: \"normalize\",\n    value: function normalize(prop) {\n      return prop;\n    }\n    /**\n     * Check `value`, that it contain other prefixes, rather than `prefix`\n     */\n\n  }, {\n    key: \"otherPrefixes\",\n    value: function otherPrefixes(value, prefix) {\n      var _iterator = _createForOfIteratorHelper(Browsers.prefixes()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var other = _step.value;\n\n          if (other === prefix) {\n            continue;\n          }\n\n          if (value.includes(other)) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return false;\n    }\n    /**\n     * Set prefix to declaration\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(decl, prefix) {\n      decl.prop = this.prefixed(decl.prop, prefix);\n      return decl;\n    }\n    /**\n     * Should we use visual cascade for prefixes\n     */\n\n  }, {\n    key: \"needCascade\",\n    value: function needCascade(decl) {\n      if (!decl._autoprefixerCascade) {\n        decl._autoprefixerCascade = this.all.options.cascade !== false && decl.raw('before').includes('\\n');\n      }\n\n      return decl._autoprefixerCascade;\n    }\n    /**\n     * Return maximum length of possible prefixed property\n     */\n\n  }, {\n    key: \"maxPrefixed\",\n    value: function maxPrefixed(prefixes, decl) {\n      if (decl._autoprefixerMax) {\n        return decl._autoprefixerMax;\n      }\n\n      var max = 0;\n\n      var _iterator2 = _createForOfIteratorHelper(prefixes),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var prefix = _step2.value;\n          prefix = utils.removeNote(prefix);\n\n          if (prefix.length > max) {\n            max = prefix.length;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      decl._autoprefixerMax = max;\n      return decl._autoprefixerMax;\n    }\n    /**\n     * Calculate indentation to create visual cascade\n     */\n\n  }, {\n    key: \"calcBefore\",\n    value: function calcBefore(prefixes, decl) {\n      var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      var max = this.maxPrefixed(prefixes, decl);\n      var diff = max - utils.removeNote(prefix).length;\n      var before = decl.raw('before');\n\n      if (diff > 0) {\n        before += Array(diff).fill(' ').join('');\n      }\n\n      return before;\n    }\n    /**\n     * Remove visual cascade\n     */\n\n  }, {\n    key: \"restoreBefore\",\n    value: function restoreBefore(decl) {\n      var lines = decl.raw('before').split('\\n');\n      var min = lines[lines.length - 1];\n      this.all.group(decl).up(function (prefixed) {\n        var array = prefixed.raw('before').split('\\n');\n        var last = array[array.length - 1];\n\n        if (last.length < min.length) {\n          min = last;\n        }\n      });\n      lines[lines.length - 1] = min;\n      decl.raws.before = lines.join('\\n');\n    }\n    /**\n     * Clone and insert new declaration\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert(decl, prefix, prefixes) {\n      var cloned = this.set(this.clone(decl), prefix);\n      if (!cloned) return undefined;\n      var already = decl.parent.some(function (i) {\n        return i.prop === cloned.prop && i.value === cloned.value;\n      });\n\n      if (already) {\n        return undefined;\n      }\n\n      if (this.needCascade(decl)) {\n        cloned.raws.before = this.calcBefore(prefixes, decl, prefix);\n      }\n\n      return decl.parent.insertBefore(decl, cloned);\n    }\n    /**\n     * Did this declaration has this prefix above\n     */\n\n  }, {\n    key: \"isAlready\",\n    value: function isAlready(decl, prefixed) {\n      var already = this.all.group(decl).up(function (i) {\n        return i.prop === prefixed;\n      });\n\n      if (!already) {\n        already = this.all.group(decl).down(function (i) {\n          return i.prop === prefixed;\n        });\n      }\n\n      return already;\n    }\n    /**\n     * Clone and add prefixes for declaration\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(decl, prefix, prefixes, result) {\n      var prefixed = this.prefixed(decl.prop, prefix);\n\n      if (this.isAlready(decl, prefixed) || this.otherPrefixes(decl.value, prefix)) {\n        return undefined;\n      }\n\n      return this.insert(decl, prefix, prefixes, result);\n    }\n    /**\n     * Add spaces for visual cascade\n     */\n\n  }, {\n    key: \"process\",\n    value: function process(decl, result) {\n      if (!this.needCascade(decl)) {\n        _get(_getPrototypeOf(Declaration.prototype), \"process\", this).call(this, decl, result);\n\n        return;\n      }\n\n      var prefixes = _get(_getPrototypeOf(Declaration.prototype), \"process\", this).call(this, decl, result);\n\n      if (!prefixes || !prefixes.length) {\n        return;\n      }\n\n      this.restoreBefore(decl);\n      decl.raws.before = this.calcBefore(prefixes, decl);\n    }\n    /**\n     * Return list of prefixed properties to clean old prefixes\n     */\n\n  }, {\n    key: \"old\",\n    value: function old(prop, prefix) {\n      return [this.prefixed(prop, prefix)];\n    }\n  }]);\n\n  return Declaration;\n}(Prefixer);\n\nmodule.exports = Declaration;","map":null,"metadata":{},"sourceType":"script"}