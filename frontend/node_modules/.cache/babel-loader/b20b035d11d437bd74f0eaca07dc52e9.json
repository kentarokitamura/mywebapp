{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar _require = require('postcss'),\n    list = _require.list;\n\nvar OldSelector = require('./old-selector');\n\nvar Prefixer = require('./prefixer');\n\nvar Browsers = require('./browsers');\n\nvar utils = require('./utils');\n\nvar Selector = /*#__PURE__*/function (_Prefixer) {\n  \"use strict\";\n\n  _inherits(Selector, _Prefixer);\n\n  function Selector(name, prefixes, all) {\n    var _this;\n\n    _classCallCheck(this, Selector);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Selector).call(this, name, prefixes, all));\n    _this.regexpCache = new Map();\n    return _this;\n  }\n  /**\n   * Is rule selectors need to be prefixed\n   */\n\n\n  _createClass(Selector, [{\n    key: \"check\",\n    value: function check(rule) {\n      if (rule.selector.includes(this.name)) {\n        return !!rule.selector.match(this.regexp());\n      }\n\n      return false;\n    }\n    /**\n     * Return prefixed version of selector\n     */\n\n  }, {\n    key: \"prefixed\",\n    value: function prefixed(prefix) {\n      return this.name.replace(/^(\\W*)/, \"$1\".concat(prefix));\n    }\n    /**\n     * Lazy loadRegExp for name\n     */\n\n  }, {\n    key: \"regexp\",\n    value: function regexp(prefix) {\n      if (!this.regexpCache.has(prefix)) {\n        var name = prefix ? this.prefixed(prefix) : this.name;\n        this.regexpCache.set(prefix, new RegExp(\"(^|[^:\\\"'=])\".concat(utils.escapeRegexp(name)), 'gi'));\n      }\n\n      return this.regexpCache.get(prefix);\n    }\n    /**\n     * All possible prefixes\n     */\n\n  }, {\n    key: \"possible\",\n    value: function possible() {\n      return Browsers.prefixes();\n    }\n    /**\n     * Return all possible selector prefixes\n     */\n\n  }, {\n    key: \"prefixeds\",\n    value: function prefixeds(rule) {\n      var _this2 = this;\n\n      if (rule._autoprefixerPrefixeds) {\n        if (rule._autoprefixerPrefixeds[this.name]) {\n          return rule._autoprefixerPrefixeds;\n        }\n      } else {\n        rule._autoprefixerPrefixeds = {};\n      }\n\n      var prefixeds = {};\n\n      if (rule.selector.includes(',')) {\n        var ruleParts = list.comma(rule.selector);\n        var toProcess = ruleParts.filter(function (el) {\n          return el.includes(_this2.name);\n        });\n\n        var _iterator = _createForOfIteratorHelper(this.possible()),\n            _step;\n\n        try {\n          var _loop = function _loop() {\n            var prefix = _step.value;\n            prefixeds[prefix] = toProcess.map(function (el) {\n              return _this2.replace(el, prefix);\n            }).join(', ');\n          };\n\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            _loop();\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      } else {\n        var _iterator2 = _createForOfIteratorHelper(this.possible()),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var prefix = _step2.value;\n            prefixeds[prefix] = this.replace(rule.selector, prefix);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n\n      rule._autoprefixerPrefixeds[this.name] = prefixeds;\n      return rule._autoprefixerPrefixeds;\n    }\n    /**\n     * Is rule already prefixed before\n     */\n\n  }, {\n    key: \"already\",\n    value: function already(rule, prefixeds, prefix) {\n      var index = rule.parent.index(rule) - 1;\n\n      while (index >= 0) {\n        var before = rule.parent.nodes[index];\n\n        if (before.type !== 'rule') {\n          return false;\n        }\n\n        var some = false;\n\n        for (var key in prefixeds[this.name]) {\n          var prefixed = prefixeds[this.name][key];\n\n          if (before.selector === prefixed) {\n            if (prefix === key) {\n              return true;\n            } else {\n              some = true;\n              break;\n            }\n          }\n        }\n\n        if (!some) {\n          return false;\n        }\n\n        index -= 1;\n      }\n\n      return false;\n    }\n    /**\n     * Replace selectors by prefixed one\n     */\n\n  }, {\n    key: \"replace\",\n    value: function replace(selector, prefix) {\n      return selector.replace(this.regexp(), \"$1\".concat(this.prefixed(prefix)));\n    }\n    /**\n     * Clone and add prefixes for at-rule\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(rule, prefix) {\n      var prefixeds = this.prefixeds(rule);\n\n      if (this.already(rule, prefixeds, prefix)) {\n        return;\n      }\n\n      var cloned = this.clone(rule, {\n        selector: prefixeds[this.name][prefix]\n      });\n      rule.parent.insertBefore(rule, cloned);\n    }\n    /**\n     * Return function to fast find prefixed selector\n     */\n\n  }, {\n    key: \"old\",\n    value: function old(prefix) {\n      return new OldSelector(this, prefix);\n    }\n  }]);\n\n  return Selector;\n}(Prefixer);\n\nmodule.exports = Selector;","map":null,"metadata":{},"sourceType":"script"}