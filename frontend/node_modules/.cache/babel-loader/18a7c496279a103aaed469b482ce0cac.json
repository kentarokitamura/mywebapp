{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _get = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar Declaration = require('../declaration');\n\nvar _require = require('./grid-utils'),\n    prefixTrackProp = _require.prefixTrackProp,\n    prefixTrackValue = _require.prefixTrackValue,\n    autoplaceGridItems = _require.autoplaceGridItems,\n    getGridGap = _require.getGridGap,\n    inheritGridGap = _require.inheritGridGap;\n\nvar Processor = require('../processor');\n\nvar GridRowsColumns = /*#__PURE__*/function (_Declaration) {\n  \"use strict\";\n\n  _inherits(GridRowsColumns, _Declaration);\n\n  function GridRowsColumns() {\n    _classCallCheck(this, GridRowsColumns);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GridRowsColumns).apply(this, arguments));\n  }\n\n  _createClass(GridRowsColumns, [{\n    key: \"prefixed\",\n\n    /**\n     * Change property name for IE\n     */\n    value: function prefixed(prop, prefix) {\n      if (prefix === '-ms-') {\n        return prefixTrackProp({\n          prop: prop,\n          prefix: prefix\n        });\n      }\n\n      return _get(_getPrototypeOf(GridRowsColumns.prototype), \"prefixed\", this).call(this, prop, prefix);\n    }\n    /**\n     * Change IE property back\n     */\n\n  }, {\n    key: \"normalize\",\n    value: function normalize(prop) {\n      return prop.replace(/^grid-(rows|columns)/, 'grid-template-$1');\n    }\n  }, {\n    key: \"insert\",\n    value: function insert(decl, prefix, prefixes, result) {\n      if (prefix !== '-ms-') return _get(_getPrototypeOf(GridRowsColumns.prototype), \"insert\", this).call(this, decl, prefix, prefixes);\n      var parent = decl.parent,\n          prop = decl.prop,\n          value = decl.value;\n      var isRowProp = prop.includes('rows');\n      var isColumnProp = prop.includes('columns');\n      var hasGridTemplate = parent.some(function (i) {\n        return i.prop === 'grid-template' || i.prop === 'grid-template-areas';\n      });\n      /**\n       * Not to prefix rows declaration if grid-template(-areas) is present\n       */\n\n      if (hasGridTemplate && isRowProp) {\n        return false;\n      }\n\n      var processor = new Processor({\n        options: {}\n      });\n      var status = processor.gridStatus(parent, result);\n      var gap = getGridGap(decl);\n      gap = inheritGridGap(decl, gap) || gap;\n      var gapValue = isRowProp ? gap.row : gap.column;\n\n      if ((status === 'no-autoplace' || status === true) && !hasGridTemplate) {\n        gapValue = null;\n      }\n\n      var prefixValue = prefixTrackValue({\n        value: value,\n        gap: gapValue\n      });\n      /**\n       * Insert prefixes\n       */\n\n      decl.cloneBefore({\n        prop: prefixTrackProp({\n          prop: prop,\n          prefix: prefix\n        }),\n        value: prefixValue\n      });\n      var autoflow = parent.nodes.find(function (i) {\n        return i.prop === 'grid-auto-flow';\n      });\n      var autoflowValue = 'row';\n\n      if (autoflow && !processor.disabled(autoflow, result)) {\n        autoflowValue = autoflow.value.trim();\n      }\n\n      if (status === 'autoplace') {\n        /**\n         * Show warning if grid-template-rows decl is not found\n         */\n        var rowDecl = parent.nodes.find(function (i) {\n          return i.prop === 'grid-template-rows';\n        });\n\n        if (!rowDecl && hasGridTemplate) {\n          return undefined;\n        } else if (!rowDecl && !hasGridTemplate) {\n          decl.warn(result, 'Autoplacement does not work without grid-template-rows property');\n          return undefined;\n        }\n        /**\n         * Show warning if grid-template-columns decl is not found\n         */\n\n\n        var columnDecl = parent.nodes.find(function (i) {\n          return i.prop === 'grid-template-columns';\n        });\n\n        if (!columnDecl && !hasGridTemplate) {\n          decl.warn(result, 'Autoplacement does not work without grid-template-columns property');\n        }\n        /**\n         * Autoplace grid items\n         */\n\n\n        if (isColumnProp && !hasGridTemplate) {\n          autoplaceGridItems(decl, result, gap, autoflowValue);\n        }\n      }\n\n      return undefined;\n    }\n  }]);\n\n  return GridRowsColumns;\n}(Declaration);\n\nGridRowsColumns.names = ['grid-template-rows', 'grid-template-columns', 'grid-rows', 'grid-columns'];\nmodule.exports = GridRowsColumns;","map":null,"metadata":{},"sourceType":"script"}