{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _get = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar OldValue = require('../old-value');\n\nvar Value = require('../value');\n\nfunction _regexp(name) {\n  return new RegExp(\"(^|[\\\\s,(])(\".concat(name, \"($|[\\\\s),]))\"), 'gi');\n}\n\nvar Intrinsic = /*#__PURE__*/function (_Value) {\n  \"use strict\";\n\n  _inherits(Intrinsic, _Value);\n\n  function Intrinsic() {\n    _classCallCheck(this, Intrinsic);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Intrinsic).apply(this, arguments));\n  }\n\n  _createClass(Intrinsic, [{\n    key: \"regexp\",\n    value: function regexp() {\n      if (!this.regexpCache) this.regexpCache = _regexp(this.name);\n      return this.regexpCache;\n    }\n  }, {\n    key: \"isStretch\",\n    value: function isStretch() {\n      return this.name === 'stretch' || this.name === 'fill' || this.name === 'fill-available';\n    }\n  }, {\n    key: \"replace\",\n    value: function replace(string, prefix) {\n      if (prefix === '-moz-' && this.isStretch()) {\n        return string.replace(this.regexp(), '$1-moz-available$3');\n      }\n\n      if (prefix === '-webkit-' && this.isStretch()) {\n        return string.replace(this.regexp(), '$1-webkit-fill-available$3');\n      }\n\n      return _get(_getPrototypeOf(Intrinsic.prototype), \"replace\", this).call(this, string, prefix);\n    }\n  }, {\n    key: \"old\",\n    value: function old(prefix) {\n      var prefixed = prefix + this.name;\n\n      if (this.isStretch()) {\n        if (prefix === '-moz-') {\n          prefixed = '-moz-available';\n        } else if (prefix === '-webkit-') {\n          prefixed = '-webkit-fill-available';\n        }\n      }\n\n      return new OldValue(this.name, prefixed, prefixed, _regexp(prefixed));\n    }\n  }, {\n    key: \"add\",\n    value: function add(decl, prefix) {\n      if (decl.prop.includes('grid') && prefix !== '-webkit-') {\n        return undefined;\n      }\n\n      return _get(_getPrototypeOf(Intrinsic.prototype), \"add\", this).call(this, decl, prefix);\n    }\n  }]);\n\n  return Intrinsic;\n}(Value);\n\nIntrinsic.names = ['max-content', 'min-content', 'fit-content', 'fill', 'fill-available', 'stretch'];\nmodule.exports = Intrinsic;","map":null,"metadata":{},"sourceType":"script"}