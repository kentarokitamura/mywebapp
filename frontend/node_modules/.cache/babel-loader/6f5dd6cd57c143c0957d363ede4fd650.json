{"ast":null,"code":"var _slicedToArray = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar vendor = require('./vendor');\n\nvar Declaration = require('./declaration');\n\nvar Resolution = require('./resolution');\n\nvar Transition = require('./transition');\n\nvar Processor = require('./processor');\n\nvar Supports = require('./supports');\n\nvar Browsers = require('./browsers');\n\nvar Selector = require('./selector');\n\nvar AtRule = require('./at-rule');\n\nvar Value = require('./value');\n\nvar utils = require('./utils');\n\nvar hackFullscreen = require('./hacks/fullscreen');\n\nvar hackPlaceholder = require('./hacks/placeholder');\n\nvar hackPlaceholderShown = require('./hacks/placeholder-shown');\n\nvar hackFileSelectorButton = require('./hacks/file-selector-button');\n\nvar hackFlex = require('./hacks/flex');\n\nvar hackOrder = require('./hacks/order');\n\nvar hackFilter = require('./hacks/filter');\n\nvar hackGridEnd = require('./hacks/grid-end');\n\nvar hackAnimation = require('./hacks/animation');\n\nvar hackFlexFlow = require('./hacks/flex-flow');\n\nvar hackFlexGrow = require('./hacks/flex-grow');\n\nvar hackFlexWrap = require('./hacks/flex-wrap');\n\nvar hackGridArea = require('./hacks/grid-area');\n\nvar hackPlaceSelf = require('./hacks/place-self');\n\nvar hackGridStart = require('./hacks/grid-start');\n\nvar hackAlignSelf = require('./hacks/align-self');\n\nvar hackAppearance = require('./hacks/appearance');\n\nvar hackFlexBasis = require('./hacks/flex-basis');\n\nvar hackMaskBorder = require('./hacks/mask-border');\n\nvar hackMaskComposite = require('./hacks/mask-composite');\n\nvar hackAlignItems = require('./hacks/align-items');\n\nvar hackUserSelect = require('./hacks/user-select');\n\nvar hackFlexShrink = require('./hacks/flex-shrink');\n\nvar hackBreakProps = require('./hacks/break-props');\n\nvar hackWritingMode = require('./hacks/writing-mode');\n\nvar hackBorderImage = require('./hacks/border-image');\n\nvar hackAlignContent = require('./hacks/align-content');\n\nvar hackBorderRadius = require('./hacks/border-radius');\n\nvar hackBlockLogical = require('./hacks/block-logical');\n\nvar hackGridTemplate = require('./hacks/grid-template');\n\nvar hackInlineLogical = require('./hacks/inline-logical');\n\nvar hackGridRowAlign = require('./hacks/grid-row-align');\n\nvar hackTransformDecl = require('./hacks/transform-decl');\n\nvar hackFlexDirection = require('./hacks/flex-direction');\n\nvar hackImageRendering = require('./hacks/image-rendering');\n\nvar hackBackdropFilter = require('./hacks/backdrop-filter');\n\nvar hackBackgroundClip = require('./hacks/background-clip');\n\nvar hackTextDecoration = require('./hacks/text-decoration');\n\nvar hackJustifyContent = require('./hacks/justify-content');\n\nvar hackBackgroundSize = require('./hacks/background-size');\n\nvar hackGridRowColumn = require('./hacks/grid-row-column');\n\nvar hackGridRowsColumns = require('./hacks/grid-rows-columns');\n\nvar hackGridColumnAlign = require('./hacks/grid-column-align');\n\nvar hackPrintColorAdjust = require('./hacks/print-color-adjust');\n\nvar hackOverscrollBehavior = require('./hacks/overscroll-behavior');\n\nvar hackGridTemplateAreas = require('./hacks/grid-template-areas');\n\nvar hackTextEmphasisPosition = require('./hacks/text-emphasis-position');\n\nvar hackTextDecorationSkipInk = require('./hacks/text-decoration-skip-ink');\n\nvar hackGradient = require('./hacks/gradient');\n\nvar hackIntrinsic = require('./hacks/intrinsic');\n\nvar hackPixelated = require('./hacks/pixelated');\n\nvar hackImageSet = require('./hacks/image-set');\n\nvar hackCrossFade = require('./hacks/cross-fade');\n\nvar hackDisplayFlex = require('./hacks/display-flex');\n\nvar hackDisplayGrid = require('./hacks/display-grid');\n\nvar hackFilterValue = require('./hacks/filter-value');\n\nvar hackAutofill = require('./hacks/autofill');\n\nSelector.hack(hackAutofill);\nSelector.hack(hackFullscreen);\nSelector.hack(hackPlaceholder);\nSelector.hack(hackPlaceholderShown);\nSelector.hack(hackFileSelectorButton);\nDeclaration.hack(hackFlex);\nDeclaration.hack(hackOrder);\nDeclaration.hack(hackFilter);\nDeclaration.hack(hackGridEnd);\nDeclaration.hack(hackAnimation);\nDeclaration.hack(hackFlexFlow);\nDeclaration.hack(hackFlexGrow);\nDeclaration.hack(hackFlexWrap);\nDeclaration.hack(hackGridArea);\nDeclaration.hack(hackPlaceSelf);\nDeclaration.hack(hackGridStart);\nDeclaration.hack(hackAlignSelf);\nDeclaration.hack(hackAppearance);\nDeclaration.hack(hackFlexBasis);\nDeclaration.hack(hackMaskBorder);\nDeclaration.hack(hackMaskComposite);\nDeclaration.hack(hackAlignItems);\nDeclaration.hack(hackUserSelect);\nDeclaration.hack(hackFlexShrink);\nDeclaration.hack(hackBreakProps);\nDeclaration.hack(hackWritingMode);\nDeclaration.hack(hackBorderImage);\nDeclaration.hack(hackAlignContent);\nDeclaration.hack(hackBorderRadius);\nDeclaration.hack(hackBlockLogical);\nDeclaration.hack(hackGridTemplate);\nDeclaration.hack(hackInlineLogical);\nDeclaration.hack(hackGridRowAlign);\nDeclaration.hack(hackTransformDecl);\nDeclaration.hack(hackFlexDirection);\nDeclaration.hack(hackImageRendering);\nDeclaration.hack(hackBackdropFilter);\nDeclaration.hack(hackBackgroundClip);\nDeclaration.hack(hackTextDecoration);\nDeclaration.hack(hackJustifyContent);\nDeclaration.hack(hackBackgroundSize);\nDeclaration.hack(hackGridRowColumn);\nDeclaration.hack(hackGridRowsColumns);\nDeclaration.hack(hackGridColumnAlign);\nDeclaration.hack(hackOverscrollBehavior);\nDeclaration.hack(hackGridTemplateAreas);\nDeclaration.hack(hackPrintColorAdjust);\nDeclaration.hack(hackTextEmphasisPosition);\nDeclaration.hack(hackTextDecorationSkipInk);\nValue.hack(hackGradient);\nValue.hack(hackIntrinsic);\nValue.hack(hackPixelated);\nValue.hack(hackImageSet);\nValue.hack(hackCrossFade);\nValue.hack(hackDisplayFlex);\nValue.hack(hackDisplayGrid);\nValue.hack(hackFilterValue);\nvar declsCache = new Map();\n\nvar Prefixes = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function Prefixes(data, browsers) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, Prefixes);\n\n    this.data = data;\n    this.browsers = browsers;\n    this.options = options;\n\n    var _this$preprocess = this.preprocess(this.select(this.data));\n\n    var _this$preprocess2 = _slicedToArray(_this$preprocess, 2);\n\n    this.add = _this$preprocess2[0];\n    this.remove = _this$preprocess2[1];\n    this.transition = new Transition(this);\n    this.processor = new Processor(this);\n  }\n  /**\n   * Return clone instance to remove all prefixes\n   */\n\n\n  _createClass(Prefixes, [{\n    key: \"cleaner\",\n    value: function cleaner() {\n      if (this.cleanerCache) {\n        return this.cleanerCache;\n      }\n\n      if (this.browsers.selected.length) {\n        var empty = new Browsers(this.browsers.data, []);\n        this.cleanerCache = new Prefixes(this.data, empty, this.options);\n      } else {\n        return this;\n      }\n\n      return this.cleanerCache;\n    }\n    /**\n     * Select prefixes from data, which is necessary for selected browsers\n     */\n\n  }, {\n    key: \"select\",\n    value: function select(list) {\n      var _this = this;\n\n      var selected = {\n        add: {},\n        remove: {}\n      };\n\n      var _loop = function _loop(name) {\n        var data = list[name];\n        var add = data.browsers.map(function (i) {\n          var params = i.split(' ');\n          return {\n            browser: \"\".concat(params[0], \" \").concat(params[1]),\n            note: params[2]\n          };\n        });\n        var notes = add.filter(function (i) {\n          return i.note;\n        }).map(function (i) {\n          return \"\".concat(_this.browsers.prefix(i.browser), \" \").concat(i.note);\n        });\n        notes = utils.uniq(notes);\n        add = add.filter(function (i) {\n          return _this.browsers.isSelected(i.browser);\n        }).map(function (i) {\n          var prefix = _this.browsers.prefix(i.browser);\n\n          if (i.note) {\n            return \"\".concat(prefix, \" \").concat(i.note);\n          } else {\n            return prefix;\n          }\n        });\n        add = _this.sort(utils.uniq(add));\n\n        if (_this.options.flexbox === 'no-2009') {\n          add = add.filter(function (i) {\n            return !i.includes('2009');\n          });\n        }\n\n        var all = data.browsers.map(function (i) {\n          return _this.browsers.prefix(i);\n        });\n\n        if (data.mistakes) {\n          all = all.concat(data.mistakes);\n        }\n\n        all = all.concat(notes);\n        all = utils.uniq(all);\n\n        if (add.length) {\n          selected.add[name] = add;\n\n          if (add.length < all.length) {\n            selected.remove[name] = all.filter(function (i) {\n              return !add.includes(i);\n            });\n          }\n        } else {\n          selected.remove[name] = all;\n        }\n      };\n\n      for (var name in list) {\n        _loop(name);\n      }\n\n      return selected;\n    }\n    /**\n     * Sort vendor prefixes\n     */\n\n  }, {\n    key: \"sort\",\n    value: function sort(prefixes) {\n      return prefixes.sort(function (a, b) {\n        var aLength = utils.removeNote(a).length;\n        var bLength = utils.removeNote(b).length;\n\n        if (aLength === bLength) {\n          return b.length - a.length;\n        } else {\n          return bLength - aLength;\n        }\n      });\n    }\n    /**\n     * Cache prefixes data to fast CSS processing\n     */\n\n  }, {\n    key: \"preprocess\",\n    value: function preprocess(selected) {\n      var add = {\n        'selectors': [],\n        '@supports': new Supports(Prefixes, this)\n      };\n\n      for (var name in selected.add) {\n        var prefixes = selected.add[name];\n\n        if (name === '@keyframes' || name === '@viewport') {\n          add[name] = new AtRule(name, prefixes, this);\n        } else if (name === '@resolution') {\n          add[name] = new Resolution(name, prefixes, this);\n        } else if (this.data[name].selector) {\n          add.selectors.push(Selector.load(name, prefixes, this));\n        } else {\n          var props = this.data[name].props;\n\n          if (props) {\n            var value = Value.load(name, prefixes, this);\n\n            var _iterator = _createForOfIteratorHelper(props),\n                _step;\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var prop = _step.value;\n\n                if (!add[prop]) {\n                  add[prop] = {\n                    values: []\n                  };\n                }\n\n                add[prop].values.push(value);\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n          } else {\n            var values = add[name] && add[name].values || [];\n            add[name] = Declaration.load(name, prefixes, this);\n            add[name].values = values;\n          }\n        }\n      }\n\n      var remove = {\n        selectors: []\n      };\n\n      for (var _name in selected.remove) {\n        var _prefixes = selected.remove[_name];\n\n        if (this.data[_name].selector) {\n          var selector = Selector.load(_name, _prefixes);\n\n          var _iterator2 = _createForOfIteratorHelper(_prefixes),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var prefix = _step2.value;\n              remove.selectors.push(selector.old(prefix));\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        } else if (_name === '@keyframes' || _name === '@viewport') {\n          var _iterator3 = _createForOfIteratorHelper(_prefixes),\n              _step3;\n\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var _prefix = _step3.value;\n              var prefixed = \"@\".concat(_prefix).concat(_name.slice(1));\n              remove[prefixed] = {\n                remove: true\n              };\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n        } else if (_name === '@resolution') {\n          remove[_name] = new Resolution(_name, _prefixes, this);\n        } else {\n          var _props = this.data[_name].props;\n\n          if (_props) {\n            var _value = Value.load(_name, [], this);\n\n            var _iterator4 = _createForOfIteratorHelper(_prefixes),\n                _step4;\n\n            try {\n              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                var _prefix2 = _step4.value;\n\n                var old = _value.old(_prefix2);\n\n                if (old) {\n                  var _iterator5 = _createForOfIteratorHelper(_props),\n                      _step5;\n\n                  try {\n                    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                      var _prop = _step5.value;\n\n                      if (!remove[_prop]) {\n                        remove[_prop] = {};\n                      }\n\n                      if (!remove[_prop].values) {\n                        remove[_prop].values = [];\n                      }\n\n                      remove[_prop].values.push(old);\n                    }\n                  } catch (err) {\n                    _iterator5.e(err);\n                  } finally {\n                    _iterator5.f();\n                  }\n                }\n              }\n            } catch (err) {\n              _iterator4.e(err);\n            } finally {\n              _iterator4.f();\n            }\n          } else {\n            var _iterator6 = _createForOfIteratorHelper(_prefixes),\n                _step6;\n\n            try {\n              for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                var p = _step6.value;\n                var olds = this.decl(_name).old(_name, p);\n\n                if (_name === 'align-self') {\n                  var a = add[_name] && add[_name].prefixes;\n\n                  if (a) {\n                    if (p === '-webkit- 2009' && a.includes('-webkit-')) {\n                      continue;\n                    } else if (p === '-webkit-' && a.includes('-webkit- 2009')) {\n                      continue;\n                    }\n                  }\n                }\n\n                var _iterator7 = _createForOfIteratorHelper(olds),\n                    _step7;\n\n                try {\n                  for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                    var _prefixed = _step7.value;\n\n                    if (!remove[_prefixed]) {\n                      remove[_prefixed] = {};\n                    }\n\n                    remove[_prefixed].remove = true;\n                  }\n                } catch (err) {\n                  _iterator7.e(err);\n                } finally {\n                  _iterator7.f();\n                }\n              }\n            } catch (err) {\n              _iterator6.e(err);\n            } finally {\n              _iterator6.f();\n            }\n          }\n        }\n      }\n\n      return [add, remove];\n    }\n    /**\n     * Declaration loader with caching\n     */\n\n  }, {\n    key: \"decl\",\n    value: function decl(prop) {\n      if (!declsCache.has(prop)) {\n        declsCache.set(prop, Declaration.load(prop));\n      }\n\n      return declsCache.get(prop);\n    }\n    /**\n     * Return unprefixed version of property\n     */\n\n  }, {\n    key: \"unprefixed\",\n    value: function unprefixed(prop) {\n      var value = this.normalize(vendor.unprefixed(prop));\n\n      if (value === 'flex-direction') {\n        value = 'flex-flow';\n      }\n\n      return value;\n    }\n    /**\n     * Normalize prefix for remover\n     */\n\n  }, {\n    key: \"normalize\",\n    value: function normalize(prop) {\n      return this.decl(prop).normalize(prop);\n    }\n    /**\n     * Return prefixed version of property\n     */\n\n  }, {\n    key: \"prefixed\",\n    value: function prefixed(prop, prefix) {\n      prop = vendor.unprefixed(prop);\n      return this.decl(prop).prefixed(prop, prefix);\n    }\n    /**\n     * Return values, which must be prefixed in selected property\n     */\n\n  }, {\n    key: \"values\",\n    value: function values(type, prop) {\n      var data = this[type];\n      var global = data['*'] && data['*'].values;\n      var values = data[prop] && data[prop].values;\n\n      if (global && values) {\n        return utils.uniq(global.concat(values));\n      } else {\n        return global || values || [];\n      }\n    }\n    /**\n     * Group declaration by unprefixed property to check them\n     */\n\n  }, {\n    key: \"group\",\n    value: function group(decl) {\n      var _this2 = this;\n\n      var rule = decl.parent;\n      var index = rule.index(decl);\n      var length = rule.nodes.length;\n      var unprefixed = this.unprefixed(decl.prop);\n\n      var checker = function checker(step, callback) {\n        index += step;\n\n        while (index >= 0 && index < length) {\n          var other = rule.nodes[index];\n\n          if (other.type === 'decl') {\n            if (step === -1 && other.prop === unprefixed) {\n              if (!Browsers.withPrefix(other.value)) {\n                break;\n              }\n            }\n\n            if (_this2.unprefixed(other.prop) !== unprefixed) {\n              break;\n            } else if (callback(other) === true) {\n              return true;\n            }\n\n            if (step === +1 && other.prop === unprefixed) {\n              if (!Browsers.withPrefix(other.value)) {\n                break;\n              }\n            }\n          }\n\n          index += step;\n        }\n\n        return false;\n      };\n\n      return {\n        up: function up(callback) {\n          return checker(-1, callback);\n        },\n        down: function down(callback) {\n          return checker(+1, callback);\n        }\n      };\n    }\n  }]);\n\n  return Prefixes;\n}();\n\nmodule.exports = Prefixes;","map":null,"metadata":{},"sourceType":"script"}