{"ast":null,"code":"var _slicedToArray = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\admin\\\\Projects\\\\mywebapp\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar flexSpec = require('./flex-spec');\n\nvar OldValue = require('../old-value');\n\nvar Value = require('../value');\n\nvar DisplayFlex = /*#__PURE__*/function (_Value) {\n  \"use strict\";\n\n  _inherits(DisplayFlex, _Value);\n\n  function DisplayFlex(name, prefixes) {\n    var _this;\n\n    _classCallCheck(this, DisplayFlex);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DisplayFlex).call(this, name, prefixes));\n\n    if (name === 'display-flex') {\n      _this.name = 'flex';\n    }\n\n    return _this;\n  }\n  /**\n   * Faster check for flex value\n   */\n\n\n  _createClass(DisplayFlex, [{\n    key: \"check\",\n    value: function check(decl) {\n      return decl.prop === 'display' && decl.value === this.name;\n    }\n    /**\n     * Return value by spec\n     */\n\n  }, {\n    key: \"prefixed\",\n    value: function prefixed(prefix) {\n      var spec, value;\n\n      var _flexSpec = flexSpec(prefix);\n\n      var _flexSpec2 = _slicedToArray(_flexSpec, 2);\n\n      spec = _flexSpec2[0];\n      prefix = _flexSpec2[1];\n\n      if (spec === 2009) {\n        if (this.name === 'flex') {\n          value = 'box';\n        } else {\n          value = 'inline-box';\n        }\n      } else if (spec === 2012) {\n        if (this.name === 'flex') {\n          value = 'flexbox';\n        } else {\n          value = 'inline-flexbox';\n        }\n      } else if (spec === 'final') {\n        value = this.name;\n      }\n\n      return prefix + value;\n    }\n    /**\n     * Add prefix to value depend on flebox spec version\n     */\n\n  }, {\n    key: \"replace\",\n    value: function replace(string, prefix) {\n      return this.prefixed(prefix);\n    }\n    /**\n     * Change value for old specs\n     */\n\n  }, {\n    key: \"old\",\n    value: function old(prefix) {\n      var prefixed = this.prefixed(prefix);\n      if (!prefixed) return undefined;\n      return new OldValue(this.name, prefixed);\n    }\n  }]);\n\n  return DisplayFlex;\n}(Value);\n\nDisplayFlex.names = ['display-flex', 'inline-flex'];\nmodule.exports = DisplayFlex;","map":null,"metadata":{},"sourceType":"script"}