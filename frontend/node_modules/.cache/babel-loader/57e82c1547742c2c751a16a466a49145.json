{"ast":null,"code":"var jsReleases = require('node-releases/data/processed/envs.json');\n\nvar agents = require('caniuse-lite/dist/unpacker/agents').agents;\n\nvar jsEOL = require('node-releases/data/release-schedule/release-schedule.json');\n\nvar path = require('path');\n\nvar e2c = require('electron-to-chromium/versions');\n\nvar BrowserslistError = require('./error');\n\nvar parse = require('./parse');\n\nvar env = require('./node'); // Will load browser.js in webpack\n\n\nvar YEAR = 365.259641 * 24 * 60 * 60 * 1000;\nvar ANDROID_EVERGREEN_FIRST = 37; // Helpers\n\nfunction isVersionsMatch(versionA, versionB) {\n  return (versionA + '.').indexOf(versionB + '.') === 0;\n}\n\nfunction isEolReleased(name) {\n  var version = name.slice(1);\n  return browserslist.nodeVersions.some(function (i) {\n    return isVersionsMatch(i, version);\n  });\n}\n\nfunction normalize(versions) {\n  return versions.filter(function (version) {\n    return typeof version === 'string';\n  });\n}\n\nfunction normalizeElectron(version) {\n  var versionToUse = version;\n\n  if (version.split('.').length === 3) {\n    versionToUse = version.split('.').slice(0, -1).join('.');\n  }\n\n  return versionToUse;\n}\n\nfunction nameMapper(name) {\n  return function mapName(version) {\n    return name + ' ' + version;\n  };\n}\n\nfunction getMajor(version) {\n  return parseInt(version.split('.')[0]);\n}\n\nfunction getMajorVersions(released, number) {\n  if (released.length === 0) return [];\n  var majorVersions = uniq(released.map(getMajor));\n  var minimum = majorVersions[majorVersions.length - number];\n\n  if (!minimum) {\n    return released;\n  }\n\n  var selected = [];\n\n  for (var i = released.length - 1; i >= 0; i--) {\n    if (minimum > getMajor(released[i])) break;\n    selected.unshift(released[i]);\n  }\n\n  return selected;\n}\n\nfunction uniq(array) {\n  var filtered = [];\n\n  for (var i = 0; i < array.length; i++) {\n    if (filtered.indexOf(array[i]) === -1) filtered.push(array[i]);\n  }\n\n  return filtered;\n}\n\nfunction fillUsage(result, name, data) {\n  for (var i in data) {\n    result[name + ' ' + i] = data[i];\n  }\n}\n\nfunction generateFilter(sign, version) {\n  version = parseFloat(version);\n\n  if (sign === '>') {\n    return function (v) {\n      return parseFloat(v) > version;\n    };\n  } else if (sign === '>=') {\n    return function (v) {\n      return parseFloat(v) >= version;\n    };\n  } else if (sign === '<') {\n    return function (v) {\n      return parseFloat(v) < version;\n    };\n  } else {\n    return function (v) {\n      return parseFloat(v) <= version;\n    };\n  }\n}\n\nfunction generateSemverFilter(sign, version) {\n  version = version.split('.').map(parseSimpleInt);\n  version[1] = version[1] || 0;\n  version[2] = version[2] || 0;\n\n  if (sign === '>') {\n    return function (v) {\n      v = v.split('.').map(parseSimpleInt);\n      return compareSemver(v, version) > 0;\n    };\n  } else if (sign === '>=') {\n    return function (v) {\n      v = v.split('.').map(parseSimpleInt);\n      return compareSemver(v, version) >= 0;\n    };\n  } else if (sign === '<') {\n    return function (v) {\n      v = v.split('.').map(parseSimpleInt);\n      return compareSemver(version, v) > 0;\n    };\n  } else {\n    return function (v) {\n      v = v.split('.').map(parseSimpleInt);\n      return compareSemver(version, v) >= 0;\n    };\n  }\n}\n\nfunction parseSimpleInt(x) {\n  return parseInt(x);\n}\n\nfunction compare(a, b) {\n  if (a < b) return -1;\n  if (a > b) return +1;\n  return 0;\n}\n\nfunction compareSemver(a, b) {\n  return compare(parseInt(a[0]), parseInt(b[0])) || compare(parseInt(a[1] || '0'), parseInt(b[1] || '0')) || compare(parseInt(a[2] || '0'), parseInt(b[2] || '0'));\n} // this follows the npm-like semver behavior\n\n\nfunction semverFilterLoose(operator, range) {\n  range = range.split('.').map(parseSimpleInt);\n\n  if (typeof range[1] === 'undefined') {\n    range[1] = 'x';\n  } // ignore any patch version because we only return minor versions\n  // range[2] = 'x'\n\n\n  switch (operator) {\n    case '<=':\n      return function (version) {\n        version = version.split('.').map(parseSimpleInt);\n        return compareSemverLoose(version, range) <= 0;\n      };\n\n    case '>=':\n    default:\n      return function (version) {\n        version = version.split('.').map(parseSimpleInt);\n        return compareSemverLoose(version, range) >= 0;\n      };\n  }\n} // this follows the npm-like semver behavior\n\n\nfunction compareSemverLoose(version, range) {\n  if (version[0] !== range[0]) {\n    return version[0] < range[0] ? -1 : +1;\n  }\n\n  if (range[1] === 'x') {\n    return 0;\n  }\n\n  if (version[1] !== range[1]) {\n    return version[1] < range[1] ? -1 : +1;\n  }\n\n  return 0;\n}\n\nfunction resolveVersion(data, version) {\n  if (data.versions.indexOf(version) !== -1) {\n    return version;\n  } else if (browserslist.versionAliases[data.name][version]) {\n    return browserslist.versionAliases[data.name][version];\n  } else {\n    return false;\n  }\n}\n\nfunction normalizeVersion(data, version) {\n  var resolved = resolveVersion(data, version);\n\n  if (resolved) {\n    return resolved;\n  } else if (data.versions.length === 1) {\n    return data.versions[0];\n  } else {\n    return false;\n  }\n}\n\nfunction filterByYear(since, context) {\n  since = since / 1000;\n  return Object.keys(agents).reduce(function (selected, name) {\n    var data = byName(name, context);\n    if (!data) return selected;\n    var versions = Object.keys(data.releaseDate).filter(function (v) {\n      var date = data.releaseDate[v];\n      return date !== null && date >= since;\n    });\n    return selected.concat(versions.map(nameMapper(data.name)));\n  }, []);\n}\n\nfunction cloneData(data) {\n  return {\n    name: data.name,\n    versions: data.versions,\n    released: data.released,\n    releaseDate: data.releaseDate\n  };\n}\n\nfunction mapVersions(data, map) {\n  data.versions = data.versions.map(function (i) {\n    return map[i] || i;\n  });\n  data.released = data.released.map(function (i) {\n    return map[i] || i;\n  });\n  var fixedDate = {};\n\n  for (var i in data.releaseDate) {\n    fixedDate[map[i] || i] = data.releaseDate[i];\n  }\n\n  data.releaseDate = fixedDate;\n  return data;\n}\n\nfunction byName(name, context) {\n  name = name.toLowerCase();\n  name = browserslist.aliases[name] || name;\n\n  if (context.mobileToDesktop && browserslist.desktopNames[name]) {\n    var desktop = browserslist.data[browserslist.desktopNames[name]];\n\n    if (name === 'android') {\n      return normalizeAndroidData(cloneData(browserslist.data[name]), desktop);\n    } else {\n      var cloned = cloneData(desktop);\n      cloned.name = name;\n\n      if (name === 'op_mob') {\n        cloned = mapVersions(cloned, {\n          '10.0-10.1': '10'\n        });\n      }\n\n      return cloned;\n    }\n  }\n\n  return browserslist.data[name];\n}\n\nfunction normalizeAndroidVersions(androidVersions, chromeVersions) {\n  var firstEvergreen = ANDROID_EVERGREEN_FIRST;\n  var last = chromeVersions[chromeVersions.length - 1];\n  return androidVersions.filter(function (version) {\n    return /^(?:[2-4]\\.|[34]$)/.test(version);\n  }).concat(chromeVersions.slice(firstEvergreen - last - 1));\n}\n\nfunction normalizeAndroidData(android, chrome) {\n  android.released = normalizeAndroidVersions(android.released, chrome.released);\n  android.versions = normalizeAndroidVersions(android.versions, chrome.versions);\n  return android;\n}\n\nfunction checkName(name, context) {\n  var data = byName(name, context);\n  if (!data) throw new BrowserslistError('Unknown browser ' + name);\n  return data;\n}\n\nfunction unknownQuery(query) {\n  return new BrowserslistError('Unknown browser query `' + query + '`. ' + 'Maybe you are using old Browserslist or made typo in query.');\n}\n\nfunction filterAndroid(list, versions, context) {\n  if (context.mobileToDesktop) return list;\n  var released = browserslist.data.android.released;\n  var last = released[released.length - 1];\n  var diff = last - ANDROID_EVERGREEN_FIRST - versions;\n\n  if (diff > 0) {\n    return list.slice(-1);\n  } else {\n    return list.slice(diff - 1);\n  }\n}\n\nfunction resolve(queries, context) {\n  return parse(QUERIES, queries).reduce(function (result, node, index) {\n    if (node.not && index === 0) {\n      throw new BrowserslistError('Write any browsers query (for instance, `defaults`) ' + 'before `' + node.query + '`');\n    }\n\n    var type = QUERIES[node.type];\n    var array = type.select.call(browserslist, context, node).map(function (j) {\n      var parts = j.split(' ');\n\n      if (parts[1] === '0') {\n        return parts[0] + ' ' + byName(parts[0], context).versions[0];\n      } else {\n        return j;\n      }\n    });\n\n    if (node.compose === 'and') {\n      if (node.not) {\n        return result.filter(function (j) {\n          return array.indexOf(j) === -1;\n        });\n      } else {\n        return result.filter(function (j) {\n          return array.indexOf(j) !== -1;\n        });\n      }\n    } else {\n      if (node.not) {\n        var filter = {};\n        array.forEach(function (j) {\n          filter[j] = true;\n        });\n        return result.filter(function (j) {\n          return !filter[j];\n        });\n      }\n\n      return result.concat(array);\n    }\n  }, []);\n}\n\nfunction prepareOpts(opts) {\n  if (typeof opts === 'undefined') opts = {};\n\n  if (typeof opts.path === 'undefined') {\n    opts.path = path.resolve ? path.resolve('.') : '.';\n  }\n\n  return opts;\n}\n\nfunction prepareQueries(queries, opts) {\n  if (typeof queries === 'undefined' || queries === null) {\n    var config = browserslist.loadConfig(opts);\n\n    if (config) {\n      queries = config;\n    } else {\n      queries = browserslist.defaults;\n    }\n  }\n\n  return queries;\n}\n\nfunction checkQueries(queries) {\n  if (!(typeof queries === 'string' || Array.isArray(queries))) {\n    throw new BrowserslistError('Browser queries must be an array or string. Got ' + typeof queries + '.');\n  }\n}\n\nvar cache = {};\n\nfunction browserslist(queries, opts) {\n  opts = prepareOpts(opts);\n  queries = prepareQueries(queries, opts);\n  checkQueries(queries);\n  var context = {\n    ignoreUnknownVersions: opts.ignoreUnknownVersions,\n    dangerousExtend: opts.dangerousExtend,\n    mobileToDesktop: opts.mobileToDesktop,\n    path: opts.path,\n    env: opts.env\n  };\n  env.oldDataWarning(browserslist.data);\n  var stats = env.getStat(opts, browserslist.data);\n\n  if (stats) {\n    context.customUsage = {};\n\n    for (var browser in stats) {\n      fillUsage(context.customUsage, browser, stats[browser]);\n    }\n  }\n\n  var cacheKey = JSON.stringify([queries, context]);\n  if (cache[cacheKey]) return cache[cacheKey];\n  var result = uniq(resolve(queries, context)).sort(function (name1, name2) {\n    name1 = name1.split(' ');\n    name2 = name2.split(' ');\n\n    if (name1[0] === name2[0]) {\n      // assumptions on caniuse data\n      // 1) version ranges never overlaps\n      // 2) if version is not a range, it never contains `-`\n      var version1 = name1[1].split('-')[0];\n      var version2 = name2[1].split('-')[0];\n      return compareSemver(version2.split('.'), version1.split('.'));\n    } else {\n      return compare(name1[0], name2[0]);\n    }\n  });\n\n  if (!process.env.BROWSERSLIST_DISABLE_CACHE) {\n    cache[cacheKey] = result;\n  }\n\n  return result;\n}\n\nbrowserslist.parse = function (queries, opts) {\n  opts = prepareOpts(opts);\n  queries = prepareQueries(queries, opts);\n  checkQueries(queries);\n  return parse(QUERIES, queries);\n}; // Will be filled by Can I Use data below\n\n\nbrowserslist.cache = {};\nbrowserslist.data = {};\nbrowserslist.usage = {\n  global: {},\n  custom: null\n}; // Default browsers query\n\nbrowserslist.defaults = ['> 0.5%', 'last 2 versions', 'Firefox ESR', 'not dead']; // Browser names aliases\n\nbrowserslist.aliases = {\n  fx: 'firefox',\n  ff: 'firefox',\n  ios: 'ios_saf',\n  explorer: 'ie',\n  blackberry: 'bb',\n  explorermobile: 'ie_mob',\n  operamini: 'op_mini',\n  operamobile: 'op_mob',\n  chromeandroid: 'and_chr',\n  firefoxandroid: 'and_ff',\n  ucandroid: 'and_uc',\n  qqandroid: 'and_qq'\n}; // Can I Use only provides a few versions for some browsers (e.g. and_chr).\n// Fallback to a similar browser for unknown versions\n\nbrowserslist.desktopNames = {\n  and_chr: 'chrome',\n  and_ff: 'firefox',\n  ie_mob: 'ie',\n  op_mob: 'opera',\n  android: 'chrome' // has extra processing logic\n\n}; // Aliases to work with joined versions like `ios_saf 7.0-7.1`\n\nbrowserslist.versionAliases = {};\nbrowserslist.clearCaches = env.clearCaches;\nbrowserslist.parseConfig = env.parseConfig;\nbrowserslist.readConfig = env.readConfig;\nbrowserslist.findConfig = env.findConfig;\nbrowserslist.loadConfig = env.loadConfig;\n\nbrowserslist.coverage = function (browsers, stats) {\n  var data;\n\n  if (typeof stats === 'undefined') {\n    data = browserslist.usage.global;\n  } else if (stats === 'my stats') {\n    var opts = {};\n    opts.path = path.resolve ? path.resolve('.') : '.';\n    var customStats = env.getStat(opts);\n\n    if (!customStats) {\n      throw new BrowserslistError('Custom usage statistics was not provided');\n    }\n\n    data = {};\n\n    for (var browser in customStats) {\n      fillUsage(data, browser, customStats[browser]);\n    }\n  } else if (typeof stats === 'string') {\n    if (stats.length > 2) {\n      stats = stats.toLowerCase();\n    } else {\n      stats = stats.toUpperCase();\n    }\n\n    env.loadCountry(browserslist.usage, stats, browserslist.data);\n    data = browserslist.usage[stats];\n  } else {\n    if ('dataByBrowser' in stats) {\n      stats = stats.dataByBrowser;\n    }\n\n    data = {};\n\n    for (var name in stats) {\n      for (var version in stats[name]) {\n        data[name + ' ' + version] = stats[name][version];\n      }\n    }\n  }\n\n  return browsers.reduce(function (all, i) {\n    var usage = data[i];\n\n    if (usage === undefined) {\n      usage = data[i.replace(/ \\S+$/, ' 0')];\n    }\n\n    return all + (usage || 0);\n  }, 0);\n};\n\nfunction nodeQuery(context, node) {\n  var matched = browserslist.nodeVersions.filter(function (i) {\n    return isVersionsMatch(i, node.version);\n  });\n\n  if (matched.length === 0) {\n    if (context.ignoreUnknownVersions) {\n      return [];\n    } else {\n      throw new BrowserslistError('Unknown version ' + node.version + ' of Node.js');\n    }\n  }\n\n  return ['node ' + matched[matched.length - 1]];\n}\n\nfunction sinceQuery(context, node) {\n  var year = parseInt(node.year);\n  var month = parseInt(node.month || '01') - 1;\n  var date = parseInt(node.date || '01');\n  return filterByYear(Date.UTC(year, month, date, 0, 0, 0), context);\n}\n\nfunction coverQuery(context, node) {\n  var coverage = parseFloat(node.coverage);\n  var usage = browserslist.usage.global;\n\n  if (node.place) {\n    if (node.place.match(/^my\\s+stats$/i)) {\n      if (!context.customUsage) {\n        throw new BrowserslistError('Custom usage statistics was not provided');\n      }\n\n      usage = context.customUsage;\n    } else {\n      var place;\n\n      if (node.place.length === 2) {\n        place = node.place.toUpperCase();\n      } else {\n        place = node.place.toLowerCase();\n      }\n\n      env.loadCountry(browserslist.usage, place, browserslist.data);\n      usage = browserslist.usage[place];\n    }\n  }\n\n  var versions = Object.keys(usage).sort(function (a, b) {\n    return usage[b] - usage[a];\n  });\n  var coveraged = 0;\n  var result = [];\n  var version;\n\n  for (var i = 0; i < versions.length; i++) {\n    version = versions[i];\n    if (usage[version] === 0) break;\n    coveraged += usage[version];\n    result.push(version);\n    if (coveraged >= coverage) break;\n  }\n\n  return result;\n}\n\nvar QUERIES = {\n  last_major_versions: {\n    matches: ['versions'],\n    regexp: /^last\\s+(\\d+)\\s+major\\s+versions?$/i,\n    select: function select(context, node) {\n      return Object.keys(agents).reduce(function (selected, name) {\n        var data = byName(name, context);\n        if (!data) return selected;\n        var list = getMajorVersions(data.released, node.versions);\n        list = list.map(nameMapper(data.name));\n\n        if (data.name === 'android') {\n          list = filterAndroid(list, node.versions, context);\n        }\n\n        return selected.concat(list);\n      }, []);\n    }\n  },\n  last_versions: {\n    matches: ['versions'],\n    regexp: /^last\\s+(\\d+)\\s+versions?$/i,\n    select: function select(context, node) {\n      return Object.keys(agents).reduce(function (selected, name) {\n        var data = byName(name, context);\n        if (!data) return selected;\n        var list = data.released.slice(-node.versions);\n        list = list.map(nameMapper(data.name));\n\n        if (data.name === 'android') {\n          list = filterAndroid(list, node.versions, context);\n        }\n\n        return selected.concat(list);\n      }, []);\n    }\n  },\n  last_electron_major_versions: {\n    matches: ['versions'],\n    regexp: /^last\\s+(\\d+)\\s+electron\\s+major\\s+versions?$/i,\n    select: function select(context, node) {\n      var validVersions = getMajorVersions(Object.keys(e2c), node.versions);\n      return validVersions.map(function (i) {\n        return 'chrome ' + e2c[i];\n      });\n    }\n  },\n  last_node_major_versions: {\n    matches: ['versions'],\n    regexp: /^last\\s+(\\d+)\\s+node\\s+major\\s+versions?$/i,\n    select: function select(context, node) {\n      return getMajorVersions(browserslist.nodeVersions, node.versions).map(function (version) {\n        return 'node ' + version;\n      });\n    }\n  },\n  last_browser_major_versions: {\n    matches: ['versions', 'browser'],\n    regexp: /^last\\s+(\\d+)\\s+(\\w+)\\s+major\\s+versions?$/i,\n    select: function select(context, node) {\n      var data = checkName(node.browser, context);\n      var validVersions = getMajorVersions(data.released, node.versions);\n      var list = validVersions.map(nameMapper(data.name));\n\n      if (data.name === 'android') {\n        list = filterAndroid(list, node.versions, context);\n      }\n\n      return list;\n    }\n  },\n  last_electron_versions: {\n    matches: ['versions'],\n    regexp: /^last\\s+(\\d+)\\s+electron\\s+versions?$/i,\n    select: function select(context, node) {\n      return Object.keys(e2c).slice(-node.versions).map(function (i) {\n        return 'chrome ' + e2c[i];\n      });\n    }\n  },\n  last_node_versions: {\n    matches: ['versions'],\n    regexp: /^last\\s+(\\d+)\\s+node\\s+versions?$/i,\n    select: function select(context, node) {\n      return browserslist.nodeVersions.slice(-node.versions).map(function (version) {\n        return 'node ' + version;\n      });\n    }\n  },\n  last_browser_versions: {\n    matches: ['versions', 'browser'],\n    regexp: /^last\\s+(\\d+)\\s+(\\w+)\\s+versions?$/i,\n    select: function select(context, node) {\n      var data = checkName(node.browser, context);\n      var list = data.released.slice(-node.versions).map(nameMapper(data.name));\n\n      if (data.name === 'android') {\n        list = filterAndroid(list, node.versions, context);\n      }\n\n      return list;\n    }\n  },\n  unreleased_versions: {\n    matches: [],\n    regexp: /^unreleased\\s+versions$/i,\n    select: function select(context) {\n      return Object.keys(agents).reduce(function (selected, name) {\n        var data = byName(name, context);\n        if (!data) return selected;\n        var list = data.versions.filter(function (v) {\n          return data.released.indexOf(v) === -1;\n        });\n        list = list.map(nameMapper(data.name));\n        return selected.concat(list);\n      }, []);\n    }\n  },\n  unreleased_electron_versions: {\n    matches: [],\n    regexp: /^unreleased\\s+electron\\s+versions?$/i,\n    select: function select() {\n      return [];\n    }\n  },\n  unreleased_browser_versions: {\n    matches: ['browser'],\n    regexp: /^unreleased\\s+(\\w+)\\s+versions?$/i,\n    select: function select(context, node) {\n      var data = checkName(node.browser, context);\n      return data.versions.filter(function (v) {\n        return data.released.indexOf(v) === -1;\n      }).map(nameMapper(data.name));\n    }\n  },\n  last_years: {\n    matches: ['years'],\n    regexp: /^last\\s+(\\d*.?\\d+)\\s+years?$/i,\n    select: function select(context, node) {\n      return filterByYear(Date.now() - YEAR * node.years, context);\n    }\n  },\n  since_y: {\n    matches: ['year'],\n    regexp: /^since (\\d+)$/i,\n    select: sinceQuery\n  },\n  since_y_m: {\n    matches: ['year', 'month'],\n    regexp: /^since (\\d+)-(\\d+)$/i,\n    select: sinceQuery\n  },\n  since_y_m_d: {\n    matches: ['year', 'month', 'day'],\n    regexp: /^since (\\d+)-(\\d+)-(\\d+)$/i,\n    select: sinceQuery\n  },\n  popularity: {\n    matches: ['sign', 'popularity'],\n    regexp: /^(>=?|<=?)\\s*(\\d+|\\d+\\.\\d+|\\.\\d+)%$/,\n    select: function select(context, node) {\n      var popularity = parseFloat(node.popularity);\n      var usage = browserslist.usage.global;\n      return Object.keys(usage).reduce(function (result, version) {\n        if (node.sign === '>') {\n          if (usage[version] > popularity) {\n            result.push(version);\n          }\n        } else if (node.sign === '<') {\n          if (usage[version] < popularity) {\n            result.push(version);\n          }\n        } else if (node.sign === '<=') {\n          if (usage[version] <= popularity) {\n            result.push(version);\n          }\n        } else if (usage[version] >= popularity) {\n          result.push(version);\n        }\n\n        return result;\n      }, []);\n    }\n  },\n  popularity_in_my_stats: {\n    matches: ['sign', 'popularity'],\n    regexp: /^(>=?|<=?)\\s*(\\d+|\\d+\\.\\d+|\\.\\d+)%\\s+in\\s+my\\s+stats$/,\n    select: function select(context, node) {\n      var popularity = parseFloat(node.popularity);\n\n      if (!context.customUsage) {\n        throw new BrowserslistError('Custom usage statistics was not provided');\n      }\n\n      var usage = context.customUsage;\n      return Object.keys(usage).reduce(function (result, version) {\n        var percentage = usage[version];\n\n        if (percentage == null) {\n          return result;\n        }\n\n        if (node.sign === '>') {\n          if (percentage > popularity) {\n            result.push(version);\n          }\n        } else if (node.sign === '<') {\n          if (percentage < popularity) {\n            result.push(version);\n          }\n        } else if (node.sign === '<=') {\n          if (percentage <= popularity) {\n            result.push(version);\n          }\n        } else if (percentage >= popularity) {\n          result.push(version);\n        }\n\n        return result;\n      }, []);\n    }\n  },\n  popularity_in_config_stats: {\n    matches: ['sign', 'popularity', 'config'],\n    regexp: /^(>=?|<=?)\\s*(\\d+|\\d+\\.\\d+|\\.\\d+)%\\s+in\\s+(\\S+)\\s+stats$/,\n    select: function select(context, node) {\n      var popularity = parseFloat(node.popularity);\n      var stats = env.loadStat(context, node.config, browserslist.data);\n\n      if (stats) {\n        context.customUsage = {};\n\n        for (var browser in stats) {\n          fillUsage(context.customUsage, browser, stats[browser]);\n        }\n      }\n\n      if (!context.customUsage) {\n        throw new BrowserslistError('Custom usage statistics was not provided');\n      }\n\n      var usage = context.customUsage;\n      return Object.keys(usage).reduce(function (result, version) {\n        var percentage = usage[version];\n\n        if (percentage == null) {\n          return result;\n        }\n\n        if (node.sign === '>') {\n          if (percentage > popularity) {\n            result.push(version);\n          }\n        } else if (node.sign === '<') {\n          if (percentage < popularity) {\n            result.push(version);\n          }\n        } else if (node.sign === '<=') {\n          if (percentage <= popularity) {\n            result.push(version);\n          }\n        } else if (percentage >= popularity) {\n          result.push(version);\n        }\n\n        return result;\n      }, []);\n    }\n  },\n  popularity_in_place: {\n    matches: ['sign', 'popularity', 'place'],\n    regexp: /^(>=?|<=?)\\s*(\\d+|\\d+\\.\\d+|\\.\\d+)%\\s+in\\s+((alt-)?\\w\\w)$/,\n    select: function select(context, node) {\n      var popularity = parseFloat(node.popularity);\n      var place = node.place;\n\n      if (place.length === 2) {\n        place = place.toUpperCase();\n      } else {\n        place = place.toLowerCase();\n      }\n\n      env.loadCountry(browserslist.usage, place, browserslist.data);\n      var usage = browserslist.usage[place];\n      return Object.keys(usage).reduce(function (result, version) {\n        var percentage = usage[version];\n\n        if (percentage == null) {\n          return result;\n        }\n\n        if (node.sign === '>') {\n          if (percentage > popularity) {\n            result.push(version);\n          }\n        } else if (node.sign === '<') {\n          if (percentage < popularity) {\n            result.push(version);\n          }\n        } else if (node.sign === '<=') {\n          if (percentage <= popularity) {\n            result.push(version);\n          }\n        } else if (percentage >= popularity) {\n          result.push(version);\n        }\n\n        return result;\n      }, []);\n    }\n  },\n  cover: {\n    matches: ['coverage'],\n    regexp: /^cover\\s+(\\d+|\\d+\\.\\d+|\\.\\d+)%$/i,\n    select: coverQuery\n  },\n  cover_in: {\n    matches: ['coverage', 'place'],\n    regexp: /^cover\\s+(\\d+|\\d+\\.\\d+|\\.\\d+)%\\s+in\\s+(my\\s+stats|(alt-)?\\w\\w)$/i,\n    select: coverQuery\n  },\n  supports: {\n    matches: ['feature'],\n    regexp: /^supports\\s+([\\w-]+)$/,\n    select: function select(context, node) {\n      env.loadFeature(browserslist.cache, node.feature);\n      var features = browserslist.cache[node.feature];\n      return Object.keys(features).reduce(function (result, version) {\n        var flags = features[version];\n\n        if (flags.indexOf('y') >= 0 || flags.indexOf('a') >= 0) {\n          result.push(version);\n        }\n\n        return result;\n      }, []);\n    }\n  },\n  electron_range: {\n    matches: ['from', 'to'],\n    regexp: /^electron\\s+([\\d.]+)\\s*-\\s*([\\d.]+)$/i,\n    select: function select(context, node) {\n      var fromToUse = normalizeElectron(node.from);\n      var toToUse = normalizeElectron(node.to);\n      var from = parseFloat(node.from);\n      var to = parseFloat(node.to);\n\n      if (!e2c[fromToUse]) {\n        throw new BrowserslistError('Unknown version ' + from + ' of electron');\n      }\n\n      if (!e2c[toToUse]) {\n        throw new BrowserslistError('Unknown version ' + to + ' of electron');\n      }\n\n      return Object.keys(e2c).filter(function (i) {\n        var parsed = parseFloat(i);\n        return parsed >= from && parsed <= to;\n      }).map(function (i) {\n        return 'chrome ' + e2c[i];\n      });\n    }\n  },\n  node_range: {\n    matches: ['from', 'to'],\n    regexp: /^node\\s+([\\d.]+)\\s*-\\s*([\\d.]+)$/i,\n    select: function select(context, node) {\n      return browserslist.nodeVersions.filter(semverFilterLoose('>=', node.from)).filter(semverFilterLoose('<=', node.to)).map(function (v) {\n        return 'node ' + v;\n      });\n    }\n  },\n  browser_range: {\n    matches: ['browser', 'from', 'to'],\n    regexp: /^(\\w+)\\s+([\\d.]+)\\s*-\\s*([\\d.]+)$/i,\n    select: function select(context, node) {\n      var data = checkName(node.browser, context);\n      var from = parseFloat(normalizeVersion(data, node.from) || node.from);\n      var to = parseFloat(normalizeVersion(data, node.to) || node.to);\n\n      function filter(v) {\n        var parsed = parseFloat(v);\n        return parsed >= from && parsed <= to;\n      }\n\n      return data.released.filter(filter).map(nameMapper(data.name));\n    }\n  },\n  electron_ray: {\n    matches: ['sign', 'version'],\n    regexp: /^electron\\s*(>=?|<=?)\\s*([\\d.]+)$/i,\n    select: function select(context, node) {\n      var versionToUse = normalizeElectron(node.version);\n      return Object.keys(e2c).filter(generateFilter(node.sign, versionToUse)).map(function (i) {\n        return 'chrome ' + e2c[i];\n      });\n    }\n  },\n  node_ray: {\n    matches: ['sign', 'version'],\n    regexp: /^node\\s*(>=?|<=?)\\s*([\\d.]+)$/i,\n    select: function select(context, node) {\n      return browserslist.nodeVersions.filter(generateSemverFilter(node.sign, node.version)).map(function (v) {\n        return 'node ' + v;\n      });\n    }\n  },\n  browser_ray: {\n    matches: ['browser', 'sign', 'version'],\n    regexp: /^(\\w+)\\s*(>=?|<=?)\\s*([\\d.]+)$/,\n    select: function select(context, node) {\n      var version = node.version;\n      var data = checkName(node.browser, context);\n      var alias = browserslist.versionAliases[data.name][version];\n      if (alias) version = alias;\n      return data.released.filter(generateFilter(node.sign, version)).map(function (v) {\n        return data.name + ' ' + v;\n      });\n    }\n  },\n  firefox_esr: {\n    matches: [],\n    regexp: /^(firefox|ff|fx)\\s+esr$/i,\n    select: function select() {\n      return ['firefox 91'];\n    }\n  },\n  opera_mini_all: {\n    matches: [],\n    regexp: /(operamini|op_mini)\\s+all/i,\n    select: function select() {\n      return ['op_mini all'];\n    }\n  },\n  electron_version: {\n    matches: ['version'],\n    regexp: /^electron\\s+([\\d.]+)$/i,\n    select: function select(context, node) {\n      var versionToUse = normalizeElectron(node.version);\n      var chrome = e2c[versionToUse];\n\n      if (!chrome) {\n        throw new BrowserslistError('Unknown version ' + node.version + ' of electron');\n      }\n\n      return ['chrome ' + chrome];\n    }\n  },\n  node_major_version: {\n    matches: ['version'],\n    regexp: /^node\\s+(\\d+)$/i,\n    select: nodeQuery\n  },\n  node_minor_version: {\n    matches: ['version'],\n    regexp: /^node\\s+(\\d+\\.\\d+)$/i,\n    select: nodeQuery\n  },\n  node_patch_version: {\n    matches: ['version'],\n    regexp: /^node\\s+(\\d+\\.\\d+\\.\\d+)$/i,\n    select: nodeQuery\n  },\n  current_node: {\n    matches: [],\n    regexp: /^current\\s+node$/i,\n    select: function select(context) {\n      return [env.currentNode(resolve, context)];\n    }\n  },\n  maintained_node: {\n    matches: [],\n    regexp: /^maintained\\s+node\\s+versions$/i,\n    select: function select(context) {\n      var now = Date.now();\n      var queries = Object.keys(jsEOL).filter(function (key) {\n        return now < Date.parse(jsEOL[key].end) && now > Date.parse(jsEOL[key].start) && isEolReleased(key);\n      }).map(function (key) {\n        return 'node ' + key.slice(1);\n      });\n      return resolve(queries, context);\n    }\n  },\n  phantomjs_1_9: {\n    matches: [],\n    regexp: /^phantomjs\\s+1.9$/i,\n    select: function select() {\n      return ['safari 5'];\n    }\n  },\n  phantomjs_2_1: {\n    matches: [],\n    regexp: /^phantomjs\\s+2.1$/i,\n    select: function select() {\n      return ['safari 6'];\n    }\n  },\n  browser_version: {\n    matches: ['browser', 'version'],\n    regexp: /^(\\w+)\\s+(tp|[\\d.]+)$/i,\n    select: function select(context, node) {\n      var version = node.version;\n      if (/^tp$/i.test(version)) version = 'TP';\n      var data = checkName(node.browser, context);\n      var alias = normalizeVersion(data, version);\n\n      if (alias) {\n        version = alias;\n      } else {\n        if (version.indexOf('.') === -1) {\n          alias = version + '.0';\n        } else {\n          alias = version.replace(/\\.0$/, '');\n        }\n\n        alias = normalizeVersion(data, alias);\n\n        if (alias) {\n          version = alias;\n        } else if (context.ignoreUnknownVersions) {\n          return [];\n        } else {\n          throw new BrowserslistError('Unknown version ' + version + ' of ' + node.browser);\n        }\n      }\n\n      return [data.name + ' ' + version];\n    }\n  },\n  browserslist_config: {\n    matches: [],\n    regexp: /^browserslist config$/i,\n    select: function select(context) {\n      return browserslist(undefined, context);\n    }\n  },\n  extends: {\n    matches: ['config'],\n    regexp: /^extends (.+)$/i,\n    select: function select(context, node) {\n      return resolve(env.loadQueries(context, node.config), context);\n    }\n  },\n  defaults: {\n    matches: [],\n    regexp: /^defaults$/i,\n    select: function select(context) {\n      return resolve(browserslist.defaults, context);\n    }\n  },\n  dead: {\n    matches: [],\n    regexp: /^dead$/i,\n    select: function select(context) {\n      var dead = ['Baidu >= 0', 'ie <= 11', 'ie_mob <= 11', 'bb <= 10', 'op_mob <= 12.1', 'samsung 4'];\n      return resolve(dead, context);\n    }\n  },\n  unknown: {\n    matches: [],\n    regexp: /^(\\w+)$/i,\n    select: function select(context, node) {\n      if (byName(node.query, context)) {\n        throw new BrowserslistError('Specify versions in Browserslist query for browser ' + node.query);\n      } else {\n        throw unknownQuery(node.query);\n      }\n    }\n  }\n} // Get and convert Can I Use data\n;\n\n(function () {\n  for (var name in agents) {\n    var browser = agents[name];\n    browserslist.data[name] = {\n      name: name,\n      versions: normalize(agents[name].versions),\n      released: normalize(agents[name].versions.slice(0, -3)),\n      releaseDate: agents[name].release_date\n    };\n    fillUsage(browserslist.usage.global, name, browser.usage_global);\n    browserslist.versionAliases[name] = {};\n\n    for (var i = 0; i < browser.versions.length; i++) {\n      var full = browser.versions[i];\n      if (!full) continue;\n\n      if (full.indexOf('-') !== -1) {\n        var interval = full.split('-');\n\n        for (var j = 0; j < interval.length; j++) {\n          browserslist.versionAliases[name][interval[j]] = full;\n        }\n      }\n    }\n  }\n\n  browserslist.versionAliases.op_mob['59'] = '58';\n  browserslist.nodeVersions = jsReleases.map(function (release) {\n    return release.version;\n  });\n})();\n\nmodule.exports = browserslist;","map":null,"metadata":{},"sourceType":"script"}